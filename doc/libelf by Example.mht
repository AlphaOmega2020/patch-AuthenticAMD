Content-Type: multipart/related; start=<op.mhtml.1218723543338.57c8bb14354ef54e@192.168.1.6>; boundary=----------BKzkkJDY8XbCaejJiJl5Jr
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/article.html
Subject: =?utf-8?Q?libelf=20by=20Example?=
MIME-Version: 1.0

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=article.html
Content-Type: text/html; charset=iso-8859-1; name=article.html
Content-Id: <op.mhtml.1218723543338.57c8bb14354ef54e@192.168.1.6>
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/article.html
Content-Transfer-Encoding: 8bit

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org" />
<title>libelf by Example</title>
<meta name="GENERATOR" content="Modular DocBook HTML Stylesheet Version 1.79" />
<link rel="STYLESHEET" type="text/css" href="docbook.css" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
</head>
<body class="ARTICLE" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#840084"
alink="#0000FF">
<div class="ARTICLE">
<div class="TITLEPAGE">
<h1 class="TITLE"><a id="AEN2" name="AEN2"><tt class="FILENAME">libelf</tt> by
Example</a></h1>

<div class="AUTHORGROUP"><a id="AEN5" name="AEN5"></a>
<h3 class="AUTHOR"><a id="AEN6" name="AEN6">Joseph Koshy</a></h3>

<div class="AFFILIATION"><span class="ORGNAME">The FreeBSD Project<br />
</span>
<div class="ADDRESS">
<p class="ADDRESS"><code class="EMAIL">&#60;<a
href="mailto:jkoshy@FreeBSD.org">jkoshy@FreeBSD.org</a>&#62;</code></p>
</div>
</div>
</div>

<p class="PUBDATE">$FreeBSD$<br />
</p>

<div class="LEGALNOTICE"><a id="TRADEMARKS" name="TRADEMARKS"></a>
<p>FreeBSD is a registered trademark of the FreeBSD Foundation.</p>

<p>Many of the designations used by manufacturers and sellers to distinguish their
products are claimed as trademarks. Where those designations appear in this document, and
the FreeBSD Project was aware of the trademark claim, the designations have been followed
by the &#8220;&trade;&#8221; or the &#8220;&reg;&#8221; symbol.</p>

<p>This document is a <span class="emphasis"><i class="EMPHASIS">draft</i></span>. It
corresponds to revision $Id$ in FreeBSD's Perforce&trade; repository. You can view its
development history at <a
href="http://perforce.freebsd.org/changeList.cgi?CMD=changes&amp;FSPC=//depot/user/jkoshy/projects/libbsdelf/doc/..."
 target="_top">this link</a>.</p>
</div>

<div>
<div class="ABSTRACT"><a id="AEN22" name="AEN22"></a>
<p><b>Abstract</b></p>

<p>This tutorial introduces the <tt class="FILENAME">libelf</tt> library in FreeBSD
-CURRENT. It shows how this library can be used to create tools that can manipulate ELF
objects for native and non-native architectures.</p>

<p>The <a href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a>/<a
href="http://www.FreeBSD.org/cgi/man.cgi?query=gelf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">gelf</span>(3)</span></a> API set is
discussed, as is handling of <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> archives. The
ELF format is discussed to the extent needed to understand the use of the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library.</p>

<p>Knowledge of the <tt class="LITERAL">C</tt> programming language is a
prerequisite.</p>
</div>
</div>

<hr />
</div>

<div class="TOC">
<dl>
<dt><b>Table of Contents</b></dt>

<dt>1 <a href="#INTRODUCTION">Introduction</a></dt>

<dt>2 <a href="#SEC.GETTING-STARTED">Getting Started</a></dt>

<dt>3 <a href="#SEC.PEERING-INSIDE">Peering Inside an ELF Object</a></dt>

<dt>4 <a href="#SEC.ELF-PHDR">Examining the Program Header Table</a></dt>

<dt>5 <a href="#SEC.ELF-SECTIONS">Looking at Sections</a></dt>

<dt>6 <a href="#SEC.CREATING-ELF">Creating new ELF objects</a></dt>

<dt>7 <a href="#SEC.AR">Processing ar(1) archives</a></dt>

<dt>8 <a href="#CONCLUSION">Conclusion</a></dt>

<dt><a href="#AEN1644">Bibliography</a></dt>
</dl>
</div>

<div class="SECT1">
<h2 class="SECT1"><a id="INTRODUCTION" name="INTRODUCTION">1 Introduction</a></h2>

<p><acronym class="ACRONYM">ELF</acronym> stands for <i class="FIRSTTERM">Extensible
Linking Format</i>. It is a format for use by compilers, linkers, loaders and other tools
that manipulate object code.</p>

<p>The ELF specification was released to the public in 1990 as an &#8220;<a
href="http://www.x86.org/ftp/manuals/tools/elf.pdf" target="_top">open
standard</a>&#8221; by a group of vendors. As a result of its ready availability it has
been widely adopted in the industry and is now the most popular object file format in use
in the open-source world. The ELF standard supports 32 and 64 bit architectures of both
big and little-endian kinds, and supports features like cross-compilation, dynamic shared
libraries. ELF also supports the special compilation needs of the C++ language. FreeBSD
switched to using ELF as its object format in FreeBSD 3.0 (October 1998).</p>

<p>The <tt class="FILENAME">libelf</tt> library provides an API set (<a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> and <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=gelf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">gelf</span>(3)</span></a>) for
application writers to read and write ELF objects with. The library eases the task of
writing cross-tools that can run on one machine architecture and manipulate ELF objects
for another.</p>

<div class="FORMALPARA">
<p><b>Rationale for this tutorial.</b> The <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> and <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=gelf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">gelf</span>(3)</span></a> API set is
also rather large, with over 80 callable functions. So the task of getting started with
the library can appear daunting at first glance. This tutorial has been written to
provide a gentler introduction to the API set than is present in FreeBSD's manual
pages.</p>
</div>

<div class="FORMALPARA">
<p><b>Target Audience.</b> This tutorial would be of interest to developers wanting to
create ELF processing tools using the <tt class="FILENAME">libelf</tt> library.</p>
</div>

<p>The tutorial covers the following:</p>

<div class="HIGHLIGHTS"><a id="AEN71" name="AEN71"></a>
<ul>
<li>
<p>The basics of the ELF format (as much as is needed to understand how to use the API
set); how the ELF format structures the contents of executables, relocatables and shared
objects.</p>
</li>

<li>
<p>How to get started building applications that use the <tt class="FILENAME">libelf</tt>
library.</p>
</li>

<li>
<p>The basic abstractions offered by the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> and <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=gelf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">gelf</span>(3)</span></a> API set--how
the ELF library abstracts out the ELF class and endianness of an ELF object and allows
the application to work with a native representation while the library translates to and
from the desired target representation behind the scenes.</p>
</li>

<li>
<p>How to use the APIs in the library to look inside an ELF object and examine its
Executable Header, Program Header Table and its component sections.</p>
</li>

<li>
<p>How to create a new ELF object using the ELF library.</p>
</li>

<li>
<p>An introduction to the class-independent <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=gelf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">gelf</span>(3)</span></a> interfaces,
and when and where to use them instead of the class-dependent functions in the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> API set.</p>
</li>

<li>
<p>How to process <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> archives using
the facilities provided by the library.</p>
</li>
</ul>
</div>

<div class="SECT2">
<hr />
<h3 class="SECT2"><a id="AEN103" name="AEN103">1.1 Article Structure</a></h3>

<p>One of the goals of this tutorial is to illustrate how to write code using <tt
class="FILENAME">libelf</tt>. So we will jump right into working code. As we progress
through the examples, we introduce the concepts necessary to understand what is happening
&#8220;behind the scenes&#8221;.</p>

<p><a href="#SEC.GETTING-STARTED">Section 2</a> covers the basics involved in getting
started with the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library--how to
compile and link an application that uses <tt class="FILENAME">libelf</tt>. We look at
the way a working version number is established by an application, how a handle to ELF
objects are obtained, and how error messages from the ELF library are reported. APIs
covered include <code class="FUNCTION">elf_begin()</code>, <code
class="FUNCTION">elf_end()</code>, <code class="FUNCTION">elf_errmsg()</code>, <code
class="FUNCTION">elf_errno()</code>, <code class="FUNCTION">elf_kind()</code> and <code
class="FUNCTION">elf_version()</code>.</p>

<p><a href="#SEC.PEERING-INSIDE">Section 3</a> shows how an application can look inside
an ELF object and understand its basic structure. Along the way we will examine the way
the ELF objects are laid out. Other key concepts examined are the notions of <i
class="FIRSTTERM">file representation</i> and <i class="FIRSTTERM">memory
representation</i> of ELF data types. New APIs covered include <code
class="FUNCTION">elf_getident()</code>, <code class="FUNCTION">elf_getphnum()</code>,
<code class="FUNCTION">elf_getshnum()</code>, <code
class="FUNCTION">elf_getshstrndx()</code>, <code class="FUNCTION">gelf_getehdr()</code>
and <code class="FUNCTION">gelf_getclass()</code>.</p>

<p><a href="#SEC.ELF-PHDR">Section 4</a> describes the ELF Program Header Table and shows
how an application can retrieve this table from an ELF object. The <code
class="FUNCTION">gelf_getphdr()</code> API is introduced in this section.</p>

<p><a href="#SEC.ELF-SECTIONS">Section 5</a> then looks at how data is stored in ELF
sections. An application that looks at ELF sections is examined. The <span
class="TYPE">Elf_Scn</span> and <span class="TYPE">Elf_Data</span> data types used by the
library are examined in detail. APIs covered include <code
class="FUNCTION">elf_getscn()</code>, <code class="FUNCTION">elf_getdata()</code>, <code
class="FUNCTION">elf_nextscn()</code>, <code class="FUNCTION">elf_strptr()</code>, and
<code class="FUNCTION">gelf_getshdr()</code>.</p>

<p><a href="#SEC.CREATING-ELF">Section 6</a> looks at how we create ELF objects. We cover
the rules in ordering of the individual API calls when creating ELF objects. We look at
the library's object layout rules and how an application can choose to override these.
APIs covered include <code class="FUNCTION">elf_fill()</code>, <code
class="FUNCTION">elf32_getshdr()</code>, <code class="FUNCTION">elf32_newehdr()</code>,
<code class="FUNCTION">elf32_newphdr()</code>, <code
class="FUNCTION">elf_flagphdr()</code>, <code class="FUNCTION">elf_ndxscn()</code>, <code
class="FUNCTION">elf_newdata()</code>, <code class="FUNCTION">elf_newscn()</code>, and
<code class="FUNCTION">elf_update()</code>.</p>

<p>The <tt class="FILENAME">libelf</tt> library also assists applications that need to
read <a href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> archives. <a
href="#SEC.AR">Section 7</a> in the tutorial covers how to use the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library to
handle archives. This section covers the use of the <code
class="FUNCTION">elf_getarhdr()</code>, <code class="FUNCTION">elf_getarsym()</code>,
<code class="FUNCTION">elf_next()</code> and <code class="FUNCTION">elf_rand()</code>
functions.</p>

<p><a href="#CONCLUSION">Section 8</a> ends the tutorial with suggestions for further
reading.</p>
</div>
</div>

<div class="SECT1">
<hr />
<h2 class="SECT1"><a id="SEC.GETTING-STARTED" name="SEC.GETTING-STARTED">2 Getting
Started</a></h2>

<p>Let us dive in first and get a taste of programming with <tt
class="FILENAME">libelf</tt>.</p>

<p>Our first program (<a href="#SRC.PROG.1">Figure 1</a>) will open a filename presented
to it on its command line and retrieve the file type recognized by the ELF library.</p>

<p>This example is covers the basics involved in using <tt class="FILENAME">libelf</tt>;
how to compile a <tt class="FILENAME">libelf</tt>-using program, how to initialize the
library, how to report errors, and so on.</p>

<div class="FIGURE"><a id="SRC.PROG.1" name="SRC.PROG.1"></a>
<p><b>Figure 1. Program 1</b></p>

<pre class="PROGRAMLISTING">
#include &lt;err.h&#62;
#include &lt;fcntl.h&#62;
#include &lt;libelf.h&#62; <a id="CO.LIBELF.INCLUDE" name="CO.LIBELF.INCLUDE"><img
src="./imagelib/callouts/1.png" hspace="0" vspace="0" border="0" alt="(1)" /></a>
#include &lt;stdio.h&#62;
#include &lt;stdlib.h&#62;
#include &lt;sysexits.h&#62;
#include &lt;unistd.h&#62;

int
main(int argc, char **argv)
{
        int fd;
        Elf *e; <a id="CO.ELF.DECL" name="CO.ELF.DECL"><img
src="./imagelib/callouts/2.png" hspace="0" vspace="0" border="0" alt="(2)" /></a>
        char *k;
        Elf_Kind ek; <a id="CO.ELF.KIND.DECL" name="CO.ELF.KIND.DECL"><img
src="./imagelib/callouts/3.png" hspace="0" vspace="0" border="0" alt="(3)" /></a>

        if (argc != 2)
                errx(EX_USAGE, "usage: %s file-name", getprogname());

        if (elf_version(EV_CURRENT) == EV_NONE) <a id="CO.ELF.VERSION"
name="CO.ELF.VERSION"><img src="./imagelib/callouts/4.png" hspace="0" vspace="0"
border="0" alt="(4)" /></a>
                errx(EX_SOFTWARE, "ELF library initialization failed: %s",
                    elf_errmsg(-1));

        if ((fd = open(argv[1], O_RDONLY, 0)) &lt; 0)
                err(EX_NOINPUT, "open \%s\" failed", argv[1]);

        if ((e = elf_begin(fd, ELF_C_READ <a id="CO.ELF.BEGIN.CMD"
name="CO.ELF.BEGIN.CMD"><img src="./imagelib/callouts/5.png" hspace="0" vspace="0"
border="0" alt="(5)" /></a>, NULL)) == NULL) <a id="CO.ELF.BEGIN"
name="CO.ELF.BEGIN"><img src="./imagelib/callouts/6.png" hspace="0" vspace="0" border="0"
alt="(6)" /></a>
                errx(EX_SOFTWARE, "elf_begin() failed: %s.",
                    elf_errmsg(-1) <a id="CO.ELF.ERRMSG" name="CO.ELF.ERRMSG"><img
src="./imagelib/callouts/7.png" hspace="0" vspace="0" border="0" alt="(7)" /></a>);

        ek = elf_kind(e); <a id="CO.ELF.KIND" name="CO.ELF.KIND"><img
src="./imagelib/callouts/8.png" hspace="0" vspace="0" border="0" alt="(8)" /></a>

        switch (ek) {
        case ELF_K_AR:
                k = "ar(1) archive";
                break;
        case ELF_K_ELF:
                k = "elf object";
                break;
        case ELF_K_NONE:
                k = "data";
                break;
        default:
                k = "unrecognized";
        }

        (void) printf("%s: %s\n", argv[1], k);

        (void) elf_end(e); <a id="CO.ELF.END" name="CO.ELF.END"><img
src="./imagelib/callouts/9.png" hspace="0" vspace="0" border="0" alt="(9)" /></a>
        (void) close(fd);

        exit(EX_OK);
}
     
</pre>
</div>

<div class="CALLOUTLIST">
<dl compact="COMPACT">
<dt><a href="#CO.LIBELF.INCLUDE"><img src="./imagelib/callouts/1.png" hspace="0"
vspace="0" border="0" alt="(1)" /></a></dt>

<dd>The functions and dataypes that make up the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> API are
declared in <tt class="FILENAME">libelf.h</tt>. This file must be included in every
application that desires to use the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library.</dd>

<dt><a href="#CO.ELF.DECL"><img src="./imagelib/callouts/2.png" hspace="0" vspace="0"
border="0" alt="(2)" /></a></dt>

<dd>The <a href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library uses an
opaque type <code class="STRUCTNAME">Elf</code> as a handle for the ELF object being
processed.</dd>

<dt><a href="#CO.ELF.VERSION"><img src="./imagelib/callouts/4.png" hspace="0" vspace="0"
border="0" alt="(4)" /></a></dt>

<dd>Before the functions in the library can be invoked, an application must indicate to
the library the version of the ELF specification it is expecting to use. This is done by
the call to <code class="FUNCTION">elf_version</code>.</dd>

<dd>
<p>A call to <code class="FUNCTION">elf_version</code> is mandatory before other
functions in the ELF library can be invoked.</p>
</dd>

<dd>
<p>There are three version numbers that come into play when an application is
manipulating an ELF object.</p>
</dd>

<dd>
<ul>
<li>
<p>First, there is the version of the ELF specification (&#8220;v<sub>1</sub>&#8221;)
that the application understands.</p>
</li>

<li>
<p>Second, we have the ELF version associated with the ELF object being processed
(&#8220;v<sub>2</sub>&#8221;).</p>
</li>

<li>
<p>Third, we have the version(s) known to the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library
(&#8220;v<sub>1</sub>&#8221; and &#8220;v<sub>2</sub>&#8221;).</p>
</li>
</ul>

<div class="FIGURE"><a id="FIG.VERSIONS" name="FIG.VERSIONS"></a>
<p><b>Figure 2. ELF Version Numbers</b></p>

<p><img src="fig-versions.png" /></p>
</div>
</dd>

<dd>
<p>In <a href="#FIG.VERSIONS">Figure 2</a> the application expects to work with ELF
specification version &#8220;v<sub>1</sub>&#8221;. The ELF object file conforms to ELF
specification version &#8220;v<sub>2</sub>&#8221;. The library understands both version
&#8220;v<sub>1</sub>&#8221; and &#8220;v<sub>2</sub>&#8221; of ELF semantics and so is
able to mediate between the application and the ELF object.</p>
</dd>

<dd>
<p>In practice though, the ELF version hasn't changed since inception, so the current
version (<code class="CONSTANT">EV_CURRENT</code>) is <tt class="LITERAL">1</tt>.</p>
</dd>

<dt><a href="#CO.ELF.BEGIN.CMD"><img src="./imagelib/callouts/5.png" hspace="0"
vspace="0" border="0" alt="(5)" /></a><a href="#CO.ELF.BEGIN"><img
src="./imagelib/callouts/6.png" hspace="0" vspace="0" border="0" alt="(6)" /></a></dt>

<dd>The <code class="FUNCTION">elf_begin</code> function takes an open file descriptor
and converts it an <code class="STRUCTNAME">Elf</code> handle according to the command
specified.</dd>

<dd>
<p>The second parameter to <code class="FUNCTION">elf_begin</code> can be one of <code
class="CONSTANT">ELF_C_READ</code> for opening an ELF object for reading, <code
class="CONSTANT">ELF_C_WRITE</code> for creating a new ELF object, or <code
class="CONSTANT">ELF_C_RDWR</code> for opening an ELF object for updates. The mode with
which file descriptor <code class="PARAMETER">fd</code> was opened with must be
consistent with the this parameter.</p>
</dd>

<dd>
<p>The third parameter to <code class="FUNCTION">elf_begin</code> is only used when
processing <a href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> archives. We
will look at <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> archive
processing in <a href="#SEC.AR">Section 7</a>.</p>
</dd>

<dt><a href="#CO.ELF.ERRMSG"><img src="./imagelib/callouts/7.png" hspace="0" vspace="0"
border="0" alt="(7)" /></a></dt>

<dd>When the ELF library encounters an error, it records an error number in an internal
location. This error number may be retrieved using the <code
class="FUNCTION">elf_errno()</code> function.</dd>

<dd>
<p>The <code class="FUNCTION">elf_errmsg</code> function returns a human readable string
describing the error number passed in. As a programming convenience, a value of <tt
class="LITERAL">-1</tt> denotes the current error number.</p>
</dd>

<dt><a href="#CO.ELF.KIND.DECL"><img src="./imagelib/callouts/3.png" hspace="0"
vspace="0" border="0" alt="(3)" /></a><a href="#CO.ELF.KIND"><img
src="./imagelib/callouts/8.png" hspace="0" vspace="0" border="0" alt="(8)" /></a></dt>

<dd>The ELF library can operate on <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> archives and ELF
objects. The function <code class="FUNCTION">elf_kind</code> returns the kind of object
associated with an <code class="STRUCTNAME">Elf</code> handle. The return value of the
<code class="FUNCTION">elf_kind</code> function is one of the values defined by the <span
class="TYPE">Elf_Kind</span> enumeration.</dd>

<dd>
<p>The <span class="TYPE">Elf_Kind</span> type is defined in <tt
class="FILENAME">libelf.h</tt>.</p>
</dd>

<dt><a href="#CO.ELF.END"><img src="./imagelib/callouts/9.png" hspace="0" vspace="0"
border="0" alt="(9)" /></a></dt>

<dd>When you are done with a handle, it is good practice to release its resources using
the <code class="FUNCTION">elf_end</code> function.</dd>
</dl>
</div>

<p>Now it is time to get something running.</p>

<p>Save the listing in <a href="#SRC.PROG.1">Figure 1</a> to file <tt
class="FILENAME">prog1.c</tt> and then compile and run it as shown in <a
href="#SCR.PROG1">Figure 3</a>.</p>

<div class="FIGURE"><a id="SCR.PROG1" name="SCR.PROG1"></a>
<p><b>Figure 3. Compiling and Running <tt class="COMMAND">prog1</tt></b></p>

<pre class="SCREEN">
% cc -o prog1 prog1.c -lelf <a id="CO.LELF" name="CO.LELF"><img
src="./imagelib/callouts/1.png" hspace="0" vspace="0" border="0" alt="(1)" /></a>
% ./prog1 prog1 <a id="CO.PROG1" name="CO.PROG1"><img src="./imagelib/callouts/2.png"
hspace="0" vspace="0" border="0" alt="(2)" /></a>
prog1: elf object
% ./prog1 /usr/lib/libc.a <a id="CO.PROG1.A" name="CO.PROG1.A"><img
src="./imagelib/callouts/3.png" hspace="0" vspace="0" border="0" alt="(3)" /></a>
/usr/lib/libc.a: ar(1) archive
     
</pre>
</div>

<div class="CALLOUTLIST">
<dl compact="COMPACT">
<dt><a href="#CO.LELF"><img src="./imagelib/callouts/1.png" hspace="0" vspace="0"
border="0" alt="(1)" /></a></dt>

<dd>The <code class="OPTION">-lelf</code> option to the <tt class="COMMAND">cc</tt>
comand informs it to link <tt class="COMMAND">prog1</tt> against the <tt
class="FILENAME">libelf</tt> library.</dd>

<dt><a href="#CO.PROG1"><img src="./imagelib/callouts/2.png" hspace="0" vspace="0"
border="0" alt="(2)" /></a></dt>

<dd>We invoke <tt class="COMMAND">prog1</tt> on itself, and it recognizes its own
executable as ELF object. All is well.</dd>

<dt><a href="#CO.PROG1.A"><img src="./imagelib/callouts/3.png" hspace="0" vspace="0"
border="0" alt="(3)" /></a></dt>

<dd>Here we see that <tt class="COMMAND">prog1</tt> recognizes an <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> archive
correctly.</dd>
</dl>
</div>

<p>Congratulations! You have created your first ELF handling program using <tt
class="FILENAME">libelf</tt>.</p>

<p>In the next section we will look deeper into the ELF format and learn how to pick the
ELF object apart into its component pieces.</p>
</div>

<div class="SECT1">
<hr />
<h2 class="SECT1"><a id="SEC.PEERING-INSIDE" name="SEC.PEERING-INSIDE">3 Peering Inside
an ELF Object</a></h2>

<p>Next, we will look inside an ELF object. We will look at how an ELF object is laid out
and introduce its major parts, namely the ELF Executable Header, the ELF Program Header
Table and ELF Sections. Along the way we will look at the way <tt
class="FILENAME">libelf</tt> handles non-native objects.</p>

<p>As an object format, ELF supports multiple kinds of objects:</p>

<ul>
<li>
<p>Compilers generate <i class="FIRSTTERM">relocatable objects</i> that contain fragments
of machine code along with the &#8220;glue&#8221; information needed when combining
multiple such objects to form a final executable.</p>
</li>

<li>
<p><i class="FIRSTTERM">Executables</i> are programs that are in a form that an operating
system can launch in a process. The process of forming executables from collections of
relocatable objects is called <i class="FIRSTTERM">linking</i>.</p>
</li>

<li>
<p><i class="FIRSTTERM">Dynamically loadable objects</i> are those that can be loaded by
an executable after it has started executing. Dynamically loadable <i
class="FIRSTTERM">shared libraries</i> are examples of such objects.</p>
</li>
</ul>

<div class="SECT2">
<hr />
<h3 class="SECT2"><a id="AEN336" name="AEN336">3.1 The Layout of an ELF file</a></h3>

<p>An ELF object consists of a mandatory header named the <i class="FIRSTTERM">ELF
Executable Header</i>, followed by optional content in the form of <i
class="FIRSTTERM">ELF Program Header Table</i> and zero or more <i class="FIRSTTERM">ELF
Sections</i>.(<a href="#FIG.ELF.LAYOUT">Figure 4</a>).</p>

<div class="FIGURE"><a id="FIG.ELF.LAYOUT" name="FIG.ELF.LAYOUT"></a>
<p><b>Figure 4. The layout of a typical ELF File</b></p>

<p><img src="fig-elflayout.png" /></p>
</div>

<ul>
<li>
<p>The <i class="FIRSTTERM">ELF Executable Header</i> defines the structure of the rest
of the file. This header is <span class="emphasis"><i class="EMPHASIS">always</i></span>
present in a valid ELF file. It describes the class of the file (whether 32 bit or 64
bit), the type (whether a relocatable, executable or shared object), and the byte
ordering used (little endian or big endian). It also describes the overall layout of the
ELF object. The ELF header is described below.</p>
</li>

<li>
<p>An optional <i class="FIRSTTERM">ELF Program Header Table</i> is present in executable
objects and contains information used by at program load time. The program header table
is described in <a href="#SEC.ELF-PHDR">Section 4</a>.</p>
</li>

<li>
<p>The contents of a relocatable ELF object are contained in <i class="FIRSTTERM">ELF
sections</i>. These sections are described by entries in an <i class="FIRSTTERM">ELF
Section Header Table</i>, which has one table entry per section present in the file. <a
href="#SEC.ELF-SECTIONS">Section 5</a> describes ELF sections and the section header
table in further detail.</p>
</li>
</ul>

<p>Every ELF object is associated with three parameters:</p>

<ul>
<li>
<p>Its <i class="FIRSTTERM">class</i> denotes whether its is a 32 bit ELF object (<code
class="CONSTANT">ELFCLASS32</code>) or a 64 bit (<code
class="CONSTANT">ELFCLASS64</code>) one.</p>
</li>

<li>
<p>Its <i class="FIRSTTERM">endianness</i> denotes whether it is using little-endian
(<code class="CONSTANT">ELFDATA2LSB</code>) or big-endian addressing (<code
class="CONSTANT">ELFDATA2MSB</code>).</p>
</li>

<li>
<p>Finally, each ELF object is associated with a <i class="FIRSTTERM">version</i> number
as discussed in <a href="#SEC.GETTING-STARTED">Section 2</a>.</p>
</li>
</ul>

<p>These parameters are stored in the ELF Executable Header. Let us now take a closer
look at the ELF Executable Header.</p>

<div class="SECT3">
<hr />
<h4 class="SECT3"><a id="AEN379" name="AEN379">3.1.1 The ELF Executable Header</a></h4>

<p><a href="#SRC.ELF.EHDR">Figure 5</a> describes the layout of an ELF Executable Header
using a &#8220;C-like&#8221; struct.</p>

<div class="FIGURE"><a id="SRC.ELF.EHDR" name="SRC.ELF.EHDR"></a>
<p><b>Figure 5. ELF Executable Headers</b></p>

<div class="INFORMALTABLE"><a id="AEN386" name="AEN386"></a>
<table border="1" width="100%" class="CALSTABLE">
<col width="40" />
<col width="40" />
<thead>
<tr>
<th>The 32 bit ELF Executable Header</th>
<th>The 64 bit ELF Executable Header</th>
</tr>
</thead>

<tbody>
<tr>
<td>
<pre class="PROGRAMLISTING">
typedef struct {
        unsigned char  e_ident[16]; <a id="CO.32.EIDENT" name="CO.32.EIDENT"><img
src="./imagelib/callouts/1.png" hspace="0" vspace="0" border="0" alt="(1)" /></a>
        uint16_t       e_type; <a id="CO.32.ETYPE" name="CO.32.ETYPE"><img
src="./imagelib/callouts/2.png" hspace="0" vspace="0" border="0" alt="(2)" /></a>
        uint16_t       e_machine; <a id="CO.32.EMACHINE" name="CO.32.EMACHINE"><img
src="./imagelib/callouts/3.png" hspace="0" vspace="0" border="0" alt="(3)" /></a>
        uint32_t       e_version;
        uint32_t       e_entry;
        uint32_t       e_phoff; <a id="CO.32.EPHOFF" name="CO.32.EPHOFF"><img
src="./imagelib/callouts/4.png" hspace="0" vspace="0" border="0" alt="(4)" /></a>
        uint32_t       e_shoff; <a id="CO.32.ESHOFF" name="CO.32.ESHOFF"><img
src="./imagelib/callouts/5.png" hspace="0" vspace="0" border="0" alt="(5)" /></a>
        uint32_t       e_flags;
        uint16_t       e_ehsize;
        uint16_t       e_phentsize;
        uint16_t       e_phnum; <a id="CO.32.EPHNUM" name="CO.32.EPHNUM"><img
src="./imagelib/callouts/6.png" hspace="0" vspace="0" border="0" alt="(6)" /></a>
        uint16_t       e_shentsize;
        uint16_t       e_shnum; <a id="CO.32.ESHNUM" name="CO.32.ESHNUM"><img
src="./imagelib/callouts/7.png" hspace="0" vspace="0" border="0" alt="(7)" /></a>
        uint16_t       e_shstrndx; <a id="CO.32.ESHSTRNDX" name="CO.32.ESHSTRNDX"><img
src="./imagelib/callouts/8.png" hspace="0" vspace="0" border="0" alt="(8)" /></a>
} Elf32_Ehdr;
                   
</pre>
</td>
<td>
<pre class="PROGRAMLISTING">
typedef struct {
        unsigned char  e_ident[16]; <a id="CO.64.EIDENT" name="CO.64.EIDENT"><img
src="./imagelib/callouts/1.png" hspace="0" vspace="0" border="0" alt="(1)" /></a>
        uint16_t       e_type; <a id="CO.64.ETYPE" name="CO.64.ETYPE"><img
src="./imagelib/callouts/2.png" hspace="0" vspace="0" border="0" alt="(2)" /></a>
        uint16_t       e_machine; <a id="CO.64.EMACHINE" name="CO.64.EMACHINE"><img
src="./imagelib/callouts/3.png" hspace="0" vspace="0" border="0" alt="(3)" /></a>
        uint32_t       e_version;
        uint64_t       e_entry;
        uint64_t       e_phoff; <a id="CO.64.EPHOFF" name="CO.64.EPHOFF"><img
src="./imagelib/callouts/4.png" hspace="0" vspace="0" border="0" alt="(4)" /></a>
        uint64_t       e_shoff; <a id="CO.64.ESHOFF" name="CO.64.ESHOFF"><img
src="./imagelib/callouts/5.png" hspace="0" vspace="0" border="0" alt="(5)" /></a>
        uint32_t       e_flags;
        uint16_t       e_ehsize;
        uint16_t       e_phentsize;
        uint16_t       e_phnum; <a id="CO.64.EPHNUM" name="CO.64.EPHNUM"><img
src="./imagelib/callouts/6.png" hspace="0" vspace="0" border="0" alt="(6)" /></a>
        uint16_t       e_shentsize;
        uint16_t       e_shnum; <a id="CO.64.ESHNUM" name="CO.64.ESHNUM"><img
src="./imagelib/callouts/7.png" hspace="0" vspace="0" border="0" alt="(7)" /></a>
        uint16_t       e_shstrndx; <a id="CO.64.ESHSTRNDX" name="CO.64.ESHSTRNDX"><img
src="./imagelib/callouts/8.png" hspace="0" vspace="0" border="0" alt="(8)" /></a>
} Elf64_Ehdr;
                   
</pre>
</td>
</tr>
</tbody>
</table>
</div>
</div>

<div class="CALLOUTLIST">
<dl compact="COMPACT">
<dt><a href="#CO.32.EIDENT"><img src="./imagelib/callouts/1.png" hspace="0" vspace="0"
border="0" alt="(1)" /></a><a href="#CO.64.EIDENT"><img src="./imagelib/callouts/1.png"
hspace="0" vspace="0" border="0" alt="(1)" /></a></dt>

<dd>The first 16 bytes contain values that determine the ELF class, version and
endianness of the rest of the file. See <a href="#FIG.ELF.EIDENT">Figure 6</a>.</dd>

<dd>
<div class="FIGURE"><a id="FIG.ELF.EIDENT" name="FIG.ELF.EIDENT"></a>
<p><b>Figure 6. The <code class="STRUCTFIELD">e_ident</code>[] array</b></p>

<p><img src="fig-eident.png" /></p>
</div>
</dd>

<dd>
<p>The first 4 bytes of an ELF object are always 0x7F, 'E', 'L' and 'F'. The next three
bytes specify the class of the ELF object (<code class="CONSTANT">ELFCLASS32</code> or
<code class="CONSTANT">ELFCLASS64</code>), its data ordering (<code
class="CONSTANT">ELFDATA2LSB</code> or <code class="CONSTANT">ELFDATA2MSB</code>) and the
ELF version the object conforms to. With this information on hand, an application (in our
case the <tt class="FILENAME">libelf</tt> library) can then interpret the rest of the ELF
Executable Header correctly.</p>
</dd>

<dt><a href="#CO.32.ETYPE"><img src="./imagelib/callouts/2.png" hspace="0" vspace="0"
border="0" alt="(2)" /></a><a href="#CO.64.ETYPE"><img src="./imagelib/callouts/2.png"
hspace="0" vspace="0" border="0" alt="(2)" /></a></dt>

<dd>The <code class="STRUCTFIELD">e_type</code> member determine the type of the ELF
object. For example, it would contain a <tt class="LITERAL">1</tt> (<code
class="CONSTANT">ET_REL</code>) in a relocatable or <tt class="LITERAL">3</tt> (<code
class="CONSTANT">ET_DYN</code>) in a shared object.</dd>

<dt><a href="#CO.32.EMACHINE"><img src="./imagelib/callouts/3.png" hspace="0" vspace="0"
border="0" alt="(3)" /></a><a href="#CO.64.EMACHINE"><img src="./imagelib/callouts/3.png"
hspace="0" vspace="0" border="0" alt="(3)" /></a></dt>

<dd>The <code class="STRUCTFIELD">e_machine</code> member describes the machine
architecture this ELF object is for. Example values are <tt class="LITERAL">3</tt> (<code
class="CONSTANT">EM_386</code>) for the Intel&reg; i386&trade; architecture and <tt
class="LITERAL">20</tt> (<code class="CONSTANT">EM_PPC</code>) for the 32-bit
PowerPC&trade; architecture.</dd>

<dt><a href="#CO.32.EPHOFF"><img src="./imagelib/callouts/4.png" hspace="0" vspace="0"
border="0" alt="(4)" /></a><a href="#CO.64.EPHOFF"><img src="./imagelib/callouts/4.png"
hspace="0" vspace="0" border="0" alt="(4)" /></a><a href="#CO.32.ESHOFF"><img
src="./imagelib/callouts/5.png" hspace="0" vspace="0" border="0" alt="(5)" /></a><a
href="#CO.64.ESHOFF"><img src="./imagelib/callouts/5.png" hspace="0" vspace="0"
border="0" alt="(5)" /></a></dt>

<dd>The ELF Executable Header also describes the layout of the rest of the ELF object.
The <code class="STRUCTFIELD">e_phoff</code> and <code class="STRUCTFIELD">e_shoff</code>
fields contain the file offsets where the ELF Program Header Table and ELF Section Header
Table would reside. These fields are zero if the file does not have a Program Header
Table or Section Header Table respectively. The sizes of these components are determined
by the <code class="STRUCTFIELD">e_phentsize</code> and <code
class="STRUCTFIELD">e_shentsize</code> members respectively in conjunction with the
number of entries in these tables.</dd>

<dd>
<div class="FIGURE"><a id="FIG.ELF.EHDR-LAYOUT" name="FIG.ELF.EHDR-LAYOUT"></a>
<p><b>Figure 7. The ELF Executable Header and Object Layout</b></p>

<p><img src="fig-elfhdrlayout.png" /></p>
</div>
</dd>

<dd>
<p>The ELF Executable Header describes its own size (in bytes) in field <code
class="STRUCTFIELD">e_ehsize</code>.</p>
</dd>

<dt><a href="#CO.32.EPHNUM"><img src="./imagelib/callouts/6.png" hspace="0" vspace="0"
border="0" alt="(6)" /></a><a href="#CO.64.EPHNUM"><img src="./imagelib/callouts/6.png"
hspace="0" vspace="0" border="0" alt="(6)" /></a><a href="#CO.32.ESHNUM"><img
src="./imagelib/callouts/7.png" hspace="0" vspace="0" border="0" alt="(7)" /></a><a
href="#CO.64.ESHNUM"><img src="./imagelib/callouts/7.png" hspace="0" vspace="0"
border="0" alt="(7)" /></a></dt>

<dd>The <code class="STRUCTFIELD">e_phnum</code> and <code
class="STRUCTFIELD">e_shnum</code> fields usually contain the number of ELF program
header table entries and Section Header Table entries. Note that these fields are only 2
bytes wide, so if an ELF object has a large number of sections or Program Header Table
entries, then a scheme known as <i class="FIRSTTERM">Extended Numbering</i> (<a
href="#SEC.EXTENDED-NUMBERING">Section 3.1.3</a>) is used to encode the actual number of
sections or program header table entries. When extended numbering is in use these fields
will contain &#8220;magic&#8221; numbers instead of actual counts.</dd>

<dt><a href="#CO.32.ESHSTRNDX"><img src="./imagelib/callouts/8.png" hspace="0" vspace="0"
border="0" alt="(8)" /></a><a href="#CO.64.ESHSTRNDX"><img
src="./imagelib/callouts/8.png" hspace="0" vspace="0" border="0" alt="(8)" /></a></dt>

<dd>If the ELF object contains sections, then we need a way to get at the names of
sections. Section names are stored in a string table. The <code
class="STRUCTFIELD">e_shstrndx</code> stores the section index of this string table (see
<a href="#SEC.EXTENDED-NUMBERING">Section 3.1.3</a>) so that processing tools know which
string table to use when retrieving names. We will cover ELF string tables in more detail
later.</dd>
</dl>
</div>

<p>The fields <code class="STRUCTFIELD">e_entry</code> and <code
class="STRUCTFIELD">e_flags</code> are used for executables and are placed in the
Executable Header for easy access at program load time. We will not look at them further
in this tutorial.</p>

<p>The ELF Executable Header is defined in the system header files <tt
class="FILENAME">sys/elf32.h</tt> and <tt class="FILENAME">sys/elf64.h</tt>. As you may
have guessed these files define the 32- and 64- bit headers respectively. The other
symbolic constants shown in this tutorial are defined in the system header <tt
class="FILENAME">sys/elf_common.h</tt>.</p>
</div>

<div class="SECT3">
<hr />
<h4 class="SECT3"><a id="AEN477" name="AEN477">3.1.2 ELF Class- and Endianness-
Independent Processing</a></h4>

<p>Now let us look at the way the <tt class="FILENAME">libelf</tt> API set abstracts out
ELF class and endianness for us.</p>

<p>Imagine that you are writing an ELF processing application that is going to support
processing of non-native binaries (say for a machine with a different native endianness
and word size). It should be evident that ELF data structures would have two distinct
representations: an <i class="FIRSTTERM">in-memory representation</i> that follows the
rules for the machine architecture that the application running on, and an <i
class="FIRSTTERM">in-file representation</i> that corresponds to the target architecture
for the ELF object.</p>

<p>The application would like to manipulate data in its native memory representation.
This memory representation would conform to the native endianness of the host's CPU and
would conform to the address alignment and structure padding requirements set by the
host's machine architecture.</p>

<p>However when this data has to go into the target object it may need to be formatted
differently. For example, it could be packed differently compared to the
&#8220;native&#8221; memory representation and may have to be laid out according a
different set of rules for alignment. The endianness of the data in-file could be
different from that of the in-memory representation.</p>

<div class="FIGURE"><a id="FIG.REPRESENTATIONS" name="FIG.REPRESENTATIONS"></a>
<p><b>Figure 8. File and Memory Representations</b></p>

<p><img src="fig-filemem.png" /></p>
</div>

<p><a href="#FIG.REPRESENTATIONS">Figure 8</a> depicts the relationship between the file
and memory representation of an ELF data structure. As shown in the figure, the size of
an ELF data structure in file could be different from its size in memory. The alignment
restrictions (<code class="VARNAME">%falign</code> and <code
class="VARNAME">%malign</code> in the figure) could be different. The byte ordering of
the data could be different too.</p>

<p>The <a href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> and <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=gelf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">gelf</span>(3)</span></a> API set can
handle the conversion of ELF data structures to and from their file representations to
memory representations automatically. For example, when we read in the ELF Executable
Header in <a href="#SRC.PROG.2">Figure 9</a> below, the <tt class="FILENAME">libelf</tt>
library will automatically do the necessary byteswapping and alignment adjustments for
us.</p>

<p>For applications that want finer-grain control over the conversion process, the <code
class="FUNCTION">elf<tt class="REPLACEABLE"><i>NN</i></tt>_xlatetof</code> and <code
class="FUNCTION">elf<tt class="REPLACEABLE"><i>NN</i></tt>_xlatetom</code> functions are
available. These functions will translate data buffers containing ELF data structures
between their memory and file representions.</p>
</div>

<div class="SECT3">
<hr />
<h4 class="SECT3"><a id="SEC.EXTENDED-NUMBERING" name="SEC.EXTENDED-NUMBERING">3.1.3
Extended numbering</a></h4>

<p>The <code class="STRUCTFIELD">e_shnum</code>, <code class="STRUCTFIELD">e_phnum</code>
and <code class="STRUCTFIELD">e_shstrndx</code> fields of the ELF Executable Header are
only 2 bytes long and are not physically capable of representing numbers larger than
65535. For ELF objects with a large number of sections, we need a different way of
encoding section numbers.</p>

<p>ELF objects with such a large number of sections can arise due to the way GCC copes
with C++ templates. When compiling C++ code which uses templates, GCC generates many
sections with the name &#8220;.gnu.linkonce.<tt
class="REPLACEABLE"><i>name</i></tt>&#8221;. While each compiled ELF relocatable object
will now contain replicated data, the linker is expected to treat such sections specially
at the final link stage, discarding all but one of each section.</p>

<p>When extended numbering is in use:</p>

<ul>
<li>
<p>The <code class="STRUCTFIELD">e_shnum</code> field of the ELF Executable Header is
always zero and the true number of sections is stored in the <code
class="STRUCTFIELD">sh_size</code> field of the section header table entry at index <tt
class="LITERAL">0</tt>.</p>
</li>

<li>
<p>The true index of the section name string table is stored in field <code
class="STRUCTFIELD">sh_link</code> field of the zeroth entry of the section header table,
while the <code class="STRUCTFIELD">e_shstrndx</code> field of the Executable Header set
to <code class="CONSTANT">SHN_XINDEX</code> (<tt class="LITERAL">0xFFFF</tt>).</p>
</li>

<li>
<p>For extended program header table numbering the scheme is similar, with the <code
class="STRUCTFIELD">e_phnum</code> field of the Executable Header holding the value <code
class="CONSTANT">PN_XNUM</code> (<tt class="LITERAL">0xFFFF</tt>) and the <code
class="STRUCTFIELD">sh_link</code> field of the zeroth section header table holding the
actual number of program header table entries.</p>
</li>
</ul>

<p>The <tt class="FILENAME">libelf</tt> library provides the functions <code
class="FUNCTION">elf_getphnum</code>, <code class="FUNCTION">elf_getshnum</code> and
<code class="FUNCTION">elf_getshstrndx</code> for applications to retrieve the correct
value of these fields, even in the presence of extended numbering.</p>
</div>
</div>

<div class="SECT2">
<hr />
<h3 class="SECT2"><a id="AEN543" name="AEN543">3.2 Reading an Executable Header using
gelf(3)</a></h3>

<p>We will now look at a small program that will print out the ELF Executable Header in
an ELF object. For this example we will introduce the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=gelf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">gelf</span>(3)</span></a> API set.</p>

<p>The <a href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> API set is
defined in terms of ELF-class dependent types (<span class="TYPE">Elf32_Ehdr</span>,
<span class="TYPE">Elf64_Shdr</span>, etc.) and consequently has many operations that
have both 32- and 64- bit variants. So, in order to retrieve an ELF Executable Header
from a 32 bit ELF object we would need to use the function <code
class="FUNCTION">elf32_getehdr</code>, which would return a pointer to an <span
class="TYPE">Elf32_Ehdr</span> structure. For a 64-bit ELF object, the function we would
need to use would be <code class="FUNCTION">elf64_getehdr</code>, which would return a
pointer to an <span class="TYPE">Elf64_Ehdr</span> structure. This duplication is awkward
to deal with in code when you want to write applications that can transparently process
either class of ELF objects.</p>

<p>The <a href="http://www.FreeBSD.org/cgi/man.cgi?query=gelf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">gelf</span>(3)</span></a> APIs provide
an ELF class independent way of writing ELF applications. These functions are defined in
terms of &#8220;generic&#8221; types that are large enough to hold the values of their
corresponding 32- and 64- bit ELF types. Further, the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=gelf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">gelf</span>(3)</span></a> APIs always
work on <span class="emphasis"><i class="EMPHASIS">copies</i></span> of ELF data
structures thus bypassing the problem of 32- and 64- bit ELF data structures having
incompatible memory layouts. You can freely mix calls to <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=gelf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">gelf</span>(3)</span></a> and <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> functions.</p>

<p>The downside of using the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=gelf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">gelf</span>(3)</span></a> APIs is the
extra copying and conversion of data that occurs. This overhead is usually not
significant to most applications.</p>

<div class="FIGURE"><a id="SRC.PROG.2" name="SRC.PROG.2"></a>
<p><b>Figure 9. Examining the Executable Header</b></p>

<pre class="PROGRAMLISTING">
/*
 * Print the ELF Executable Header from an ELF object.
 */

#include &lt;err.h&#62;
#include &lt;fcntl.h&#62;
#include &lt;gelf.h&#62; <a id="CO.GELF.H" name="CO.GELF.H"><img
src="./imagelib/callouts/1.png" hspace="0" vspace="0" border="0" alt="(1)" /></a>
#include &lt;stdio.h&#62;
#include &lt;stdint.h&#62;
#include &lt;stdlib.h&#62;
#include &lt;sysexits.h&#62;
#include &lt;unistd.h&#62;
#include &lt;vis.h&#62;

int
main(int argc, char **argv)
{
        int i, fd;
        Elf *e;
        char *id, bytes[5];
        size_t n;
        GElf_Ehdr ehdr; <a id="CO.GELF.EHDR.DECL" name="CO.GELF.EHDR.DECL"><img
src="./imagelib/callouts/2.png" hspace="0" vspace="0" border="0" alt="(2)" /></a>

        if (argc != 2)
                errx(EX_USAGE, "usage: %s file-name", getprogname());

        if (elf_version(EV_CURRENT) == EV_NONE)
                errx(EX_SOFTWARE, "ELF library initialization failed: %s",
                    elf_errmsg(-1));

        if ((fd = open(argv[1], O_RDONLY, 0)) &lt; 0)
                err(EX_NOINPUT, "open \"%s\" failed", argv[1]);

        if ((e = elf_begin(fd, ELF_C_READ, NULL)) == NULL)
                errx(EX_SOFTWARE, "elf_begin() failed: %s.",
                    elf_errmsg(-1));

        if (elf_kind(e) != ELF_K_ELF)
                errx(EX_DATAERR, "\"%s\" is not an ELF object.", argv[1]);

        if (gelf_getehdr(e, &amp;ehdr) == NULL) <a id="CO.GELF.GETEHDR"
name="CO.GELF.GETEHDR"><img src="./imagelib/callouts/3.png" hspace="0" vspace="0"
border="0" alt="(3)" /></a>
                errx(EX_SOFTWARE, "getehdr() failed: %s.",
                    elf_errmsg(-1));

        if ((i = gelf_getclass(e)) == ELFCLASSNONE) <a id="CO.GELF.GETCLASS"
name="CO.GELF.GETCLASS"><img src="./imagelib/callouts/4.png" hspace="0" vspace="0"
border="0" alt="(4)" /></a>
                errx(EX_SOFTWARE, "getclass() failed: %s.",
                    elf_errmsg(-1));

        (void) printf("%s: %d-bit ELF object\n", argv[1],
            i == ELFCLASS32 ? 32 : 64);

        if ((id = elf_getident(e, NULL)) == NULL) <a id="CO.ELF.GETIDENT"
name="CO.ELF.GETIDENT"><img src="./imagelib/callouts/5.png" hspace="0" vspace="0"
border="0" alt="(5)" /></a>
                errx(EX_SOFTWARE, "getident() failed: %s.",
                    elf_errmsg(-1));

       (void) printf("%3s e_ident[0..%1d] %7s", " ", EI_ABIVERSION, " ");

        for (i = 0; i &lt;= EI_ABIVERSION; i++) {
                (void) vis(bytes, id[i], VIS_WHITE, 0);
                (void) printf(" ['%s' %X]", bytes, id[i]);
        }

        (void) printf("\n");


        <a id="CO.EHDR.PRINTFIELDS" name="CO.EHDR.PRINTFIELDS"><img
src="./imagelib/callouts/6.png" hspace="0" vspace="0" border="0" alt="(6)" /></a>
#define        PRINT_FORMAT        "    %-20s 0x%jx\n"
#define        PRINT_FIELD(N) do {                                        \
                (void) printf(PRINT_FORMAT ,#N, (uintmax_t) ehdr.N);      \
        } while (0)

        PRINT_FIELD(e_type);
        PRINT_FIELD(e_machine);
        PRINT_FIELD(e_version);
        PRINT_FIELD(e_entry);
        PRINT_FIELD(e_phoff);
        PRINT_FIELD(e_shoff);
        PRINT_FIELD(e_flags);
        PRINT_FIELD(e_ehsize);
        PRINT_FIELD(e_phentsize);
        PRINT_FIELD(e_shentsize);

        if (elf_getshnum(e, &amp;n) == 0) <a id="CO.ELF.GETSHNUM"
name="CO.ELF.GETSHNUM"><img src="./imagelib/callouts/7.png" hspace="0" vspace="0"
border="0" alt="(7)" /></a>
                errx(EX_SOFTWARE, "getshnum() failed: %s.",
                    elf_errmsg(-1));
        (void) printf(PRINT_FORMAT, "(shnum)", (uintmax_t) n);

        if (elf_getshstrndx(e, &amp;n) == 0) <a id="CO.ELF.GETSHSTRNDX"
name="CO.ELF.GETSHSTRNDX"><img src="./imagelib/callouts/8.png" hspace="0" vspace="0"
border="0" alt="(8)" /></a>
                errx(EX_SOFTWARE, "getshstrndx() failed: %s.",
                    elf_errmsg(-1));
        (void) printf(PRINT_FORMAT, "(shstrndx)", (uintmax_t) n);

        if (elf_getphnum(e, &amp;n) == 0) <a id="CO.ELF.GETPHNUM"
name="CO.ELF.GETPHNUM"><img src="./imagelib/callouts/9.png" hspace="0" vspace="0"
border="0" alt="(9)" /></a>
                errx(EX_SOFTWARE, "getphnum() failed: %s.",
                    elf_errmsg(-1));
        (void) printf(PRINT_FORMAT, "(phnum)", (uintmax_t) n);

        (void) elf_end(e);
        (void) close(fd);
        exit(EX_OK);
}
       
</pre>
</div>

<div class="CALLOUTLIST">
<dl compact="COMPACT">
<dt><a href="#CO.GELF.H"><img src="./imagelib/callouts/1.png" hspace="0" vspace="0"
border="0" alt="(1)" /></a></dt>

<dd>Programs using the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=gelf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">gelf</span>(3)</span></a> API set need
to include <tt class="FILENAME">gelf.h</tt>.</dd>

<dt><a href="#CO.GELF.EHDR.DECL"><img src="./imagelib/callouts/2.png" hspace="0"
vspace="0" border="0" alt="(2)" /></a></dt>

<dd>The <a href="http://www.FreeBSD.org/cgi/man.cgi?query=gelf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">gelf</span>(3)</span></a> functions
always operate on a local copies of data structures. The <span
class="TYPE">GElf_Ehdr</span> type has fields that are large enough to contain values for
a 64 bit ELF Executable Heaer.</dd>

<dt><a href="#CO.GELF.GETEHDR"><img src="./imagelib/callouts/3.png" hspace="0" vspace="0"
border="0" alt="(3)" /></a></dt>

<dd>We retrieve the ELF Executable Header using function <code
class="FUNCTION">gelf_getehdr</code>. This function will translate the ELF Executable
Header in the ELF object being read to the appropriate in-memory representation for type
<span class="TYPE">GElf_Ehdr</span>. For example, if a 32-bit ELF object is being
examined, then the values in its executable header would be appropriately converted
(expanded and/or byteswapped) by this function.</dd>

<dt><a href="#CO.GELF.GETCLASS"><img src="./imagelib/callouts/4.png" hspace="0"
vspace="0" border="0" alt="(4)" /></a></dt>

<dd>The <code class="FUNCTION">gelf_getclass</code> function retrieves the ELF class of
the object being examined.</dd>

<dt><a href="#CO.ELF.GETIDENT"><img src="./imagelib/callouts/5.png" hspace="0" vspace="0"
border="0" alt="(5)" /></a></dt>

<dd>Here we show the use of the <code class="FUNCTION">elf_getident</code> function to
retrieve the contents of the <code class="STRUCTFIELD">e_ident[]</code> array from the
underlying file. These bytes would also be present in the <code
class="STRUCTFIELD">e_ident</code> member of the <code class="VARNAME">ehdr</code>
structure.</dd>

<dd>
<p>Here we print the first few bytes of the <code class="STRUCTFIELD">e_ident[]</code>
field of the ELF Executable Header.</p>
</dd>

<dt><a href="#CO.EHDR.PRINTFIELDS"><img src="./imagelib/callouts/6.png" hspace="0"
vspace="0" border="0" alt="(6)" /></a></dt>

<dd>Following the <code class="STRUCTFIELD">e_ident[]</code> bytes, we print the values
of some of the fields of the ELF Executable Header structure.</dd>

<dt><a href="#CO.ELF.GETSHNUM"><img src="./imagelib/callouts/7.png" hspace="0" vspace="0"
border="0" alt="(7)" /></a><a href="#CO.ELF.GETSHSTRNDX"><img
src="./imagelib/callouts/8.png" hspace="0" vspace="0" border="0" alt="(8)" /></a><a
href="#CO.ELF.GETPHNUM"><img src="./imagelib/callouts/9.png" hspace="0" vspace="0"
border="0" alt="(9)" /></a></dt>

<dd>As described in <a href="#SEC.EXTENDED-NUMBERING">Section 3.1.3</a>, the <code
class="FUNCTION">elf_getphnum</code>, <code class="FUNCTION">elf_getshnum</code> and
<code class="FUNCTION">elf_getshstrndx</code> functions should be used to retrieve the
count of program header table entries, the number of sections, and the section name
string table index from the ELF Executable Header. Using these functions insulates your
application from the quirks of extended numbering.</dd>
</dl>
</div>

<p>Save the listing in <a href="#SRC.PROG.2">Figure 9</a> to file <tt
class="FILENAME">prog2.c</tt> and then compile and run it as shown in <a
href="#SCR.PROG2">Figure 10</a>.</p>

<div class="FIGURE"><a id="SCR.PROG2" name="SCR.PROG2"></a>
<p><b>Figure 10. Compiling and Running <tt class="COMMAND">prog2</tt></b></p>

<pre class="SCREEN">
% cc -o prog2 prog2.c -lelf <a id="CO.PROG2.COMPILE" name="CO.PROG2.COMPILE"><img
src="./imagelib/callouts/1.png" hspace="0" vspace="0" border="0" alt="(1)" /></a>
% ./prog2 prog2 <a id="CO.PROG2.RUN" name="CO.PROG2.RUN"><img
src="./imagelib/callouts/2.png" hspace="0" vspace="0" border="0" alt="(2)" /></a>
prog2: 64-bit ELF object
    e_ident[0..8]         ['\^?' 7F] ['E' 45] ['L' 4C] ['F' 46] ['\^B' 2] ['\^A' 1] ['\^A' 1] ['\^I' 9] ['\^@' 0]
    e_type               0x2
    e_machine            0x3e
    e_version            0x1
    e_entry              0x400a10
    e_phoff              0x40
    e_shoff              0x16f8
    e_flags              0x0
    e_ehsize             0x40
    e_phentsize          0x38
    e_shentsize          0x40
    (shnum)              0x18
    (shstrndx)           0x15
    (phnum)              0x5
       
</pre>
</div>

<div class="CALLOUTLIST">
<dl compact="COMPACT">
<dt><a href="#CO.PROG2.COMPILE"><img src="./imagelib/callouts/1.png" hspace="0"
vspace="0" border="0" alt="(1)" /></a></dt>

<dd>The process for compiling and linking a <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=gelf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">gelf</span>(3)</span></a> using
application is the same as that for <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> programs.</dd>

<dt><a href="#CO.PROG2.RUN"><img src="./imagelib/callouts/2.png" hspace="0" vspace="0"
border="0" alt="(2)" /></a></dt>

<dd>We run our program on itself.</dd>

<dd>
<p>This listing in this tutorial was generated on an AMD64&trade; machine running
FreeBSD.</p>
</dd>
</dl>
</div>

<p>You should now run <tt class="COMMAND">prog2</tt> on other object files that you have
lying around. Try it on a few non-native ELF object files too.</p>
</div>
</div>

<div class="SECT1">
<hr />
<h2 class="SECT1"><a id="SEC.ELF-PHDR" name="SEC.ELF-PHDR">4 Examining the Program Header
Table</a></h2>

<p>Before a program on disk can be executed by a processor it needs to brought into main
memory. This process is conventionally called &#8220;loading&#8221;.</p>

<p>When loading an executable into memory, the operating system views it as comprising of
&#8220;segments&#8221;. Each such segment starts somewhere in the ELF object, is
associated with a particular protection characteristic (for example, read-only or
read-write), and gets loaded into a specific memory address and is .</p>

<p>For example, FreeBSD expects (statically linked) executables to have an
&#8220;executable&#8221; segment containing code, and a &#8220;data&#8221; segment
containing statically initialized data. The executable segment would be mapped in with
read-only and execute permissions and could be shared across multiple processes using the
same ELF executable. The data segment would be mapped in with read and write permissions
and would be made private to the process. For dynamically linked executables the basic
idea of grouping related parts of an ELF object into contiguous &#8220;segments&#8221;
still holds, though there may be multiple segments of each type per process.</p>

<p>The ELF <i class="FIRSTTERM">Program Header Table</i> encodes information about the
segments present in the ELF file. Using the Program Header Table, the ELF file can be
viewed as a collection of non-overlapping segments, each segment being described by a
Program Header Table entry. The structure of each Program Header Table entry is shown in
<a href="#SRC.ELF.PHDR">Figure 11</a>.</p>

<div class="FIGURE"><a id="SRC.ELF.PHDR" name="SRC.ELF.PHDR"></a>
<p><b>Figure 11. ELF Program Header Table Entries</b></p>

<div class="INFORMALTABLE"><a id="AEN666" name="AEN666"></a>
<table border="1" width="100%" class="CALSTABLE">
<col width="40" />
<col width="40" />
<thead>
<tr>
<th>A 32 bit ELF Program Header Table Entry</th>
<th>A 64 bit ELF Program Header Table Entry</th>
</tr>
</thead>

<tbody>
<tr>
<td>
<pre class="PROGRAMLISTING">
typedef struct {
        Elf32_Word      p_type; <a id="CO.32.PTYPE" name="CO.32.PTYPE"><img
src="./imagelib/callouts/1.png" hspace="0" vspace="0" border="0" alt="(1)" /></a>
        Elf32_Off       p_offset; <a id="CO.32.POFFSET" name="CO.32.POFFSET"><img
src="./imagelib/callouts/2.png" hspace="0" vspace="0" border="0" alt="(2)" /></a>
        Elf32_Addr      p_vaddr; <a id="CO.32.PVADDR" name="CO.32.PVADDR"><img
src="./imagelib/callouts/3.png" hspace="0" vspace="0" border="0" alt="(3)" /></a>
        Elf32_Addr      p_paddr; <a id="CO.32.PPADDR" name="CO.32.PPADDR"><img
src="./imagelib/callouts/4.png" hspace="0" vspace="0" border="0" alt="(4)" /></a>
        Elf32_Word      p_filesz; <a id="CO.32.PFILESZ" name="CO.32.PFILESZ"><img
src="./imagelib/callouts/5.png" hspace="0" vspace="0" border="0" alt="(5)" /></a>
        Elf32_Word      p_memsz; <a id="CO.32.PMEMSZ" name="CO.32.PMEMSZ"><img
src="./imagelib/callouts/6.png" hspace="0" vspace="0" border="0" alt="(6)" /></a>
        Elf32_Word      p_flags; <a id="CO.32.PFLAGS" name="CO.32.PFLAGS"><img
src="./imagelib/callouts/7.png" hspace="0" vspace="0" border="0" alt="(7)" /></a>
        Elf32_Word      p_align; <a id="CO.32.PALIGN" name="CO.32.PALIGN"><img
src="./imagelib/callouts/8.png" hspace="0" vspace="0" border="0" alt="(8)" /></a>
} Elf32_Phdr;
               
</pre>
</td>
<td>
<pre class="PROGRAMLISTING">
typedef struct {
        Elf64_Word      p_type;
        Elf64_Word      p_flags;
        Elf64_Off       p_offset;
        Elf64_Addr      p_vaddr;
        Elf64_Addr      p_paddr;
        Elf64_Xword     p_filesz;
        Elf64_Xword     p_memsz;
        Elf64_Xword     p_align;
} Elf64_Phdr;
               
</pre>
</td>
</tr>
</tbody>
</table>
</div>
</div>

<div class="CALLOUTLIST">
<dl compact="COMPACT">
<dt><a href="#CO.32.PTYPE"><img src="./imagelib/callouts/1.png" hspace="0" vspace="0"
border="0" alt="(1)" /></a></dt>

<dd>The type of the Program Header Table entry is encoded using this field. It holds one
of the <code class="CONSTANT">PT_*</code> constants defined in <tt
class="FILENAME">sys/elf_common.h</tt>.</dd>

<dd>
<p>Examples include:</p>
</dd>

<dd>
<ul>
<li>
<p>A segment of type <code class="CONSTANT">PT_LOAD</code> is loaded into memory.</p>
</li>

<li>
<p>A segment of type <code class="CONSTANT">PT_NOTE</code> contains auxiliary
information. For example, core files (see <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=core&amp;amp;sektion=5"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">core</span>(5)</span></a>) use <code
class="CONSTANT">PT_NOTE</code> sections to record the name of the process that dumped
core.</p>
</li>

<li>
<p>A <code class="CONSTANT">PT_PHDR</code> segment describes the Program Header Table
itself.</p>
</li>
</ul>
</dd>

<dd>
<p>The ELF specification reserves type values from <tt class="LITERAL">0x60000000</tt>
(<code class="CONSTANT">PT_LOOS</code>) to <tt class="LITERAL">0x6FFFFFFF</tt> (<code
class="CONSTANT">PT_HIOS</code>) for OS-private information. Values from <tt
class="LITERAL">0x70000000</tt> (<code class="CONSTANT">PT_LOPROC</code>) to <tt
class="LITERAL">0x7FFFFFFF</tt> (<code class="CONSTANT">PT_HIPROC</code>) are similarly
reserved for processor-specific information.</p>
</dd>

<dt><a href="#CO.32.POFFSET"><img src="./imagelib/callouts/2.png" hspace="0" vspace="0"
border="0" alt="(2)" /></a></dt>

<dd>The <code class="STRUCTFIELD">p_offset</code> field holds the file offset in the ELF
object to the start of the segment being described by this table entry.</dd>

<dt><a href="#CO.32.PVADDR"><img src="./imagelib/callouts/3.png" hspace="0" vspace="0"
border="0" alt="(3)" /></a></dt>

<dd>The virtual address this segment should be loaded at.</dd>

<dt><a href="#CO.32.PPADDR"><img src="./imagelib/callouts/4.png" hspace="0" vspace="0"
border="0" alt="(4)" /></a></dt>

<dd>The physical address this segment should be loaded at. This field does not apply for
userland objects.</dd>

<dt><a href="#CO.32.PFILESZ"><img src="./imagelib/callouts/5.png" hspace="0" vspace="0"
border="0" alt="(5)" /></a></dt>

<dd>The number of bytes the segment takes up in the file. This number is zero for
segments that do not have data associated with them in the file.</dd>

<dt><a href="#CO.32.PMEMSZ"><img src="./imagelib/callouts/6.png" hspace="0" vspace="0"
border="0" alt="(6)" /></a></dt>

<dd>The number of bytes the segment takes up in memory.</dd>

<dt><a href="#CO.32.PFLAGS"><img src="./imagelib/callouts/7.png" hspace="0" vspace="0"
border="0" alt="(7)" /></a></dt>

<dd>Additional flags that specify segment properties. For example, flag <tt
class="LITERAL">PF_X</tt> specifies that the segment in question should be made
executable and flag <tt class="LITERAL">PF_W</tt> denotes that the segment should be
writable.</dd>

<dt><a href="#CO.32.PALIGN"><img src="./imagelib/callouts/8.png" hspace="0" vspace="0"
border="0" alt="(8)" /></a></dt>

<dd>The alignment requirements of the segment both in memory and in the file. This field
holds a value that is a power of two.</dd>
</dl>
</div>

<div class="NOTE">
<blockquote class="NOTE">
<p><b>Note:</b> The careful reader will note that the 32- and 64- bit Elf_Phdr structures
are laid out differently in memory. These differences are handled for you by the
functions in the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library.</p>
</blockquote>
</div>

<p><a href="#FIG.ELF.PHDR.LAYOUT">Figure 12</a> shows graphically how the fields of the
Program Header Table entry specify the segment's placement in file and in memory.</p>

<div class="FIGURE"><a id="FIG.ELF.PHDR.LAYOUT" name="FIG.ELF.PHDR.LAYOUT"></a>
<p><b>Figure 12. ELF Segment Placement</b></p>

<p><img src="fig-phdrlayout.png" /></p>
</div>

<div class="SECT2">
<hr />
<h3 class="SECT2"><a id="AEN746" name="AEN746">4.1 Reading a Program Header Table using
<span class="CITEREFENTRY">gelf(3)</span></a></h3>

<p>We will now look at a program that will print out the Program Header Table associated
with an ELF object. We will continue to use the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=gelf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">gelf</span>(3)</span></a> API set for
this example. The <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> API set also
offers two ELF class dependent APIs that retrieve the Program Header Table from an ELF
object: <code class="FUNCTION">elf32_getphdr</code> and <code
class="FUNCTION">elf64_getphdr</code>, but these require us to know the ELF class of the
object being handled.</p>

<div class="FIGURE"><a id="SRC.PROG.3" name="SRC.PROG.3"></a>
<p><b>Figure 13. Printing the Program Header Table</b></p>

<pre class="PROGRAMLISTING">
/*
 * Print the ELF Program Header Table in an ELF object.
 */

#include &lt;err.h&#62;
#include &lt;fcntl.h&#62;
#include &lt;gelf.h&#62; <a id="CO.PHDR.GELF.H" name="CO.PHDR.GELF.H"><img
src="./imagelib/callouts/1.png" hspace="0" vspace="0" border="0" alt="(1)" /></a>
#include &lt;stdio.h&#62;
#include &lt;stdint.h&#62;
#include &lt;stdlib.h&#62;
#include &lt;sysexits.h&#62;
#include &lt;unistd.h&#62;
#include &lt;vis.h&#62;

void
print_ptype(size_t pt) <a id="CO.PHDR.PRINTHELPER" name="CO.PHDR.PRINTHELPER"><img
src="./imagelib/callouts/2.png" hspace="0" vspace="0" border="0" alt="(2)" /></a>
{
        char *s;

#define C(V) case PT_##V: s = #V; break
        switch (pt) {
            C(NULL);        C(LOAD);        C(DYNAMIC);
            C(INTERP);      C(NOTE);        C(SHLIB);
            C(PHDR);        C(TLS);         C(SUNW_UNWIND);
            C(SUNWBSS);     C(SUNWSTACK);   C(SUNWDTRACE);
            C(SUNWCAP);
        default:
                s = "unknown";
                break;
        }
        (void) printf(" \"%s\"", s);
#undef  C
}

int
main(int argc, char **argv)
{
        int i, fd;
        Elf *e;
        char *id, bytes[5];
        size_t n;
        GElf_Phdr phdr; <a id="CO.PHDR.DECL" name="CO.PHDR.DECL"><img
src="./imagelib/callouts/3.png" hspace="0" vspace="0" border="0" alt="(3)" /></a>

        if (argc != 2)
                errx(EX_USAGE, "usage: %s file-name", getprogname());

        if (elf_version(EV_CURRENT) == EV_NONE)
                errx(EX_SOFTWARE, "ELF library initialization failed: %s",
                    elf_errmsg(-1));

        if ((fd = open(argv[1], O_RDONLY, 0)) &lt; 0)
                err(EX_NOINPUT, "open \"%s\" failed", argv[1]);

        if ((e = elf_begin(fd, ELF_C_READ, NULL)) == NULL)
                errx(EX_SOFTWARE, "elf_begin() failed: %s.",
                    elf_errmsg(-1));

        if (elf_kind(e) != ELF_K_ELF)
                errx(EX_DATAERR, "\"%s\" is not an ELF object.", argv[1]);

        if (elf_getphnum(e, &amp;n) == 0) <a id="CO.PHDR.GETPHNUM"
name="CO.PHDR.GETPHNUM"><img src="./imagelib/callouts/4.png" hspace="0" vspace="0"
border="0" alt="(4)" /></a>
                errx(EX_DATAERR, "elf_getphnum() failed: %s.",
                    elf_errmsg(-1));

        for (i = 0; i &#60; n; i++) { <a id="CO.PHDR.LOOP" name="CO.PHDR.LOOP"><img
src="./imagelib/callouts/5.png" hspace="0" vspace="0" border="0" alt="(5)" /></a>
                if (gelf_getphdr(e, i, &amp;phdr) != &amp;phdr) <a id="CO.PHDR.GETPHDR"
name="CO.PHDR.GETPHDR"><img src="./imagelib/callouts/6.png" hspace="0" vspace="0"
border="0" alt="(6)" /></a>
                        errx(EX_SOFTWARE, "getphdr() failed: %s.",
                            elf_errmsg(-1));

                <a id="CO.PHDR.PRINT" name="CO.PHDR.PRINT"><img
src="./imagelib/callouts/7.png" hspace="0" vspace="0" border="0" alt="(7)" /></a>
                (void) printf("PHDR %d:\n");
#define        PRINT_FORMAT        "    %-20s 0x%jx"
#define        PRINT_FIELD(N) do {                                      \
                (void) printf(PRINT_FORMAT, #N, (uintmax_t) phdr.N);    \
        } while (0)
#define         NL() do { (void) printf("\n"); } while (0)
                PRINT_FIELD(p_type);
                print_ptype(phdr.p_type);       NL();
                PRINT_FIELD(p_offset);          NL();
                PRINT_FIELD(p_vaddr);           NL();
                PRINT_FIELD(p_paddr);           NL();
                PRINT_FIELD(p_filesz);          NL();
                PRINT_FIELD(p_memsz);           NL();
                PRINT_FIELD(p_flags);
                (void) printf(" [");
                if (phdr.p_flags &amp; PF_X)
                        (void) printf(" execute");
                if (phdr.p_flags &amp; PF_R)
                        (void) printf(" read");
                if (phdr.p_flags &amp; PF_W)
                        (void) printf(" write");
                printf(" ]");                   NL();
                PRINT_FIELD(p_align);           NL();
        }

        (void) elf_end(e);
        (void) close(fd);
        exit(EX_OK);
}
       
</pre>
</div>

<div class="CALLOUTLIST">
<dl compact="COMPACT">
<dt><a href="#CO.PHDR.GELF.H"><img src="./imagelib/callouts/1.png" hspace="0" vspace="0"
border="0" alt="(1)" /></a></dt>

<dd>We need to include <tt class="FILENAME">gelf.h</tt> in order to use the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=gelf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">gelf</span>(3)</span></a> APIs.</dd>

<dt><a href="#CO.PHDR.DECL"><img src="./imagelib/callouts/3.png" hspace="0" vspace="0"
border="0" alt="(3)" /></a></dt>

<dd>The <span class="TYPE">GElf_Phdr</span> type has fields that are large enough to
contain the values in an <span class="TYPE">Elf32_Phdr</span> type and an <span
class="TYPE">Elf64_Phdr</span> type.</dd>

<dt><a href="#CO.PHDR.GETPHNUM"><img src="./imagelib/callouts/4.png" hspace="0"
vspace="0" border="0" alt="(4)" /></a></dt>

<dd>We retrieve the number of Program Header Table entries using <code
class="FUNCTION">elf_getphnum</code>. Note that the Program Header Table is optional; for
example, an ELF relocatable object will not have a Program Header Table.</dd>

<dt><a href="#CO.PHDR.LOOP"><img src="./imagelib/callouts/5.png" hspace="0" vspace="0"
border="0" alt="(5)" /></a><a href="#CO.PHDR.GETPHDR"><img
src="./imagelib/callouts/6.png" hspace="0" vspace="0" border="0" alt="(6)" /></a></dt>

<dd>We iterate over all valid indices for the object's Program Header Table, retrieving
the table entry at each index using the <code class="FUNCTION">gelf_getphdr</code>
function.</dd>

<dt><a href="#CO.PHDR.PRINT"><img src="./imagelib/callouts/7.png" hspace="0" vspace="0"
border="0" alt="(7)" /></a><a href="#CO.PHDR.PRINTHELPER"><img
src="./imagelib/callouts/2.png" hspace="0" vspace="0" border="0" alt="(2)" /></a></dt>

<dd>We then print out the contents of the entry so retrieved. We use a helper function
<code class="FUNCTION">print_ptype</code> to convert the <code
class="STRUCTFIELD">p_type</code> member to a readable string.</dd>
</dl>
</div>

<p>Save the listing in <a href="#SRC.PROG.3">Figure 13</a> to file <tt
class="FILENAME">prog3.c</tt> and then compile and run it as shown in <a
href="#SCR.PROG3">Figure 14</a>.</p>

<div class="FIGURE"><a id="SCR.PROG3" name="SCR.PROG3"></a>
<p><b>Figure 14. Compiling and Running <tt class="COMMAND">prog3</tt></b></p>

<pre class="SCREEN">
% cc -o prog3 prog3.c -lelf <a id="CO.PROG3.COMPILE" name="CO.PROG3.COMPILE"><img
src="./imagelib/callouts/1.png" hspace="0" vspace="0" border="0" alt="(1)" /></a>
% ./prog3 prog3 <a id="CO.PROG3.RUN" name="CO.PROG3.RUN"><img
src="./imagelib/callouts/2.png" hspace="0" vspace="0" border="0" alt="(2)" /></a>
PHDR 0:
    p_type               0x6 "PHDR" <a id="CO.PROG3.PHDRENTRY.PHDR"
name="CO.PROG3.PHDRENTRY.PHDR"><img src="./imagelib/callouts/3.png" hspace="0" vspace="0"
border="0" alt="(3)" /></a>
    p_offset             0x34
    p_vaddr              0x8048034
    p_paddr              0x8048034
    p_filesz             0xc0
    p_memsz              0xc0
    p_flags              0x5 [ execute read ]
    p_align              0x4
PHDR 1:
    p_type               0x3 "INTERP" <a id="CO.PROG3.PHDRENTRY.INTERP"
name="CO.PROG3.PHDRENTRY.INTERP"><img src="./imagelib/callouts/4.png" hspace="0"
vspace="0" border="0" alt="(4)" /></a>
    p_offset             0xf4
    p_vaddr              0x80480f4
    p_paddr              0x80480f4
    p_filesz             0x15
    p_memsz              0x15
    p_flags              0x4 [ read ]
    p_align              0x1
PHDR 2:
    p_type               0x1 "LOAD" <a id="CO.PROG3.PHDRENTRY.LOAD1"
name="CO.PROG3.PHDRENTRY.LOAD1"><img src="./imagelib/callouts/5.png" hspace="0"
vspace="0" border="0" alt="(5)" /></a>
    p_offset             0x0
    p_vaddr              0x8048000
    p_paddr              0x8048000
    p_filesz             0xe67
    p_memsz              0xe67
    p_flags              0x5 [ execute read ]
    p_align              0x1000
PHDR 3:
    p_type               0x1 "LOAD" <a id="CO.PROG3.PHDRENTRY.LOAD2"
name="CO.PROG3.PHDRENTRY.LOAD2"><img src="./imagelib/callouts/6.png" hspace="0"
vspace="0" border="0" alt="(6)" /></a>
    p_offset             0xe68
    p_vaddr              0x8049e68
    p_paddr              0x8049e68
    p_filesz             0x11c
    p_memsz              0x13c
    p_flags              0x6 [ read write ]
    p_align              0x1000
PHDR 4:
    p_type               0x2 "DYNAMIC"
    p_offset             0xe78
    p_vaddr              0x8049e78
    p_paddr              0x8049e78
    p_filesz             0xb8
    p_memsz              0xb8
    p_flags              0x6 [ read write ]
    p_align              0x4
PHDR 5:
    p_type               0x4 "NOTE"
    p_offset             0x10c
    p_vaddr              0x804810c
    p_paddr              0x804810c
    p_filesz             0x18
    p_memsz              0x18
    p_flags              0x4 [ read ]
    p_align              0x4
       
</pre>
</div>

<div class="CALLOUTLIST">
<dl compact="COMPACT">
<dt><a href="#CO.PROG3.COMPILE"><img src="./imagelib/callouts/1.png" hspace="0"
vspace="0" border="0" alt="(1)" /></a></dt>

<dd>Compile and link the program in the standard way.</dd>

<dt><a href="#CO.PROG3.RUN"><img src="./imagelib/callouts/2.png" hspace="0" vspace="0"
border="0" alt="(2)" /></a></dt>

<dd>We make our program examine its own Program Header Table.</dd>

<dd>
<p>This listing was generated on an i386&trade; machine running FreeBSD.</p>
</dd>

<dt><a href="#CO.PROG3.PHDRENTRY.PHDR"><img src="./imagelib/callouts/3.png" hspace="0"
vspace="0" border="0" alt="(3)" /></a></dt>

<dd>The very first entry in this Program Header Table describes the Program Header Table
itself.</dd>

<dt><a href="#CO.PROG3.PHDRENTRY.INTERP"><img src="./imagelib/callouts/4.png" hspace="0"
vspace="0" border="0" alt="(4)" /></a></dt>

<dd>An entry of type <code class="CONSTANT">PT_INTERP</code> is used to point the kernel
to the &#8220;interpreter&#8221; associated with this ELF object. This is usually the
runtime loader <tt class="FILENAME">/libexec/ld-elf.so.1</tt>.</dd>

<dt><a href="#CO.PROG3.PHDRENTRY.LOAD1"><img src="./imagelib/callouts/5.png" hspace="0"
vspace="0" border="0" alt="(5)" /></a><a href="#CO.PROG3.PHDRENTRY.LOAD2"><img
src="./imagelib/callouts/6.png" hspace="0" vspace="0" border="0" alt="(6)" /></a></dt>

<dd>This object has two loadable segments: one with execute and read permissions and one
with read and write permissions. Both these segments require page alignment.</dd>
</dl>
</div>

<p>You should now run <tt class="COMMAND">prog3</tt> on other object files.</p>

<ul>
<li>
<p>Try a relocatable object file created by a <tt class="COMMAND">cc <code
class="OPTION">-c</code></tt> invocation. Does it have an Program Header Table?</p>
</li>

<li>
<p>Try <tt class="COMMAND">prog3</tt> on shared libraries. What do their Program Header
Tables look like?</p>
</li>

<li>
<p>Can you locate ELF objects on your system that have <code
class="CONSTANT">PT_TLS</code> header entries?</p>
</li>
</ul>
</div>

<div class="SECT2">
<hr />
<h3 class="SECT2"><a id="AEN834" name="AEN834">4.2 Further exploration</a></h3>

<p>File <tt class="FILENAME">/usr/src/sys/kern/imgact_elf.c</tt> contains routines that
implement the FreeBSD kernel's handling of ELF executables.</p>
</div>
</div>

<div class="SECT1">
<hr />
<h2 class="SECT1"><a id="SEC.ELF-SECTIONS" name="SEC.ELF-SECTIONS">5 Looking at
Sections</a></h2>

<p>In the <a href="#SEC.ELF-PHDR">previous section</a> we looked at the way an executable
ELF objects are viewed by the operating system. In this section we will look at the
features of the ELF format that are used by compilers and linkers.</p>

<p>For linking, data in an ELF object is grouped into <i class="FIRSTTERM">sections</i>.
Each ELF section represents one kind of data. For example, a section could contain a
table of strings used for program symbols, another could contain debug information, and
another could contain machine code. Non-empty sections do not overlap in the file.</p>

<p>ELF sections are described by entries in an <i class="FIRSTTERM">ELF Section Header
Table</i>. This table is usually placed at the very end of the ELF object (see <a
href="#FIG.ELF.LAYOUT">Figure 4</a>). <a href="#SRC.ELF.SHDR">Figure 15</a> describes the
elements of section header table entry and <a href="#FIG.ELF.SHDRLAYOUT">Figure 16</a>
shows graphically how the fields of the Section Header specify a section's placement.</p>

<div class="FIGURE"><a id="SRC.ELF.SHDR" name="SRC.ELF.SHDR"></a>
<p><b>Figure 15. ELF Section Header Table Entries</b></p>

<div class="INFORMALTABLE"><a id="AEN851" name="AEN851"></a>
<table border="1" width="100%" class="CALSTABLE">
<col width="40" />
<col width="40" />
<thead>
<tr>
<th>A 32 bit ELF Section Header Table Entry</th>
<th>A 64 bit ELF Section Header Table Entry</th>
</tr>
</thead>

<tbody>
<tr>
<td>
<pre class="PROGRAMLISTING">
typedef struct {
        Elf32_Word      sh_name; <a id="CO.32.SHNAME" name="CO.32.SHNAME"><img
src="./imagelib/callouts/1.png" hspace="0" vspace="0" border="0" alt="(1)" /></a>
        Elf32_Word      sh_type; <a id="CO.32.SHTYPE" name="CO.32.SHTYPE"><img
src="./imagelib/callouts/2.png" hspace="0" vspace="0" border="0" alt="(2)" /></a>
        Elf32_Word      sh_flags; <a id="CO.32.SHFLAGS" name="CO.32.SHFLAGS"><img
src="./imagelib/callouts/3.png" hspace="0" vspace="0" border="0" alt="(3)" /></a>
        Elf32_Addr      sh_addr; <a id="CO.32.SHADDR" name="CO.32.SHADDR"><img
src="./imagelib/callouts/4.png" hspace="0" vspace="0" border="0" alt="(4)" /></a>
        Elf32_Off       sh_offset; <a id="CO.32.SHOFFSET" name="CO.32.SHOFFSET"><img
src="./imagelib/callouts/5.png" hspace="0" vspace="0" border="0" alt="(5)" /></a>
        Elf32_Word      sh_size; <a id="CO.32.SHSIZE" name="CO.32.SHSIZE"><img
src="./imagelib/callouts/6.png" hspace="0" vspace="0" border="0" alt="(6)" /></a>
        Elf32_Word      sh_link; <a id="CO.32.SHLINK" name="CO.32.SHLINK"><img
src="./imagelib/callouts/7.png" hspace="0" vspace="0" border="0" alt="(7)" /></a>
        Elf32_Word      sh_info; <a id="CO.32.SHINFO" name="CO.32.SHINFO"><img
src="./imagelib/callouts/8.png" hspace="0" vspace="0" border="0" alt="(8)" /></a>
        Elf32_Word      sh_addralign; <a id="CO.32.SHADDRALIGN"
name="CO.32.SHADDRALIGN"><img src="./imagelib/callouts/9.png" hspace="0" vspace="0"
border="0" alt="(9)" /></a>
        Elf32_Word      sh_entsize; <a id="CO.32.SHENTSIZE" name="CO.32.SHENTSIZE"><img
src="./imagelib/callouts/10.png" hspace="0" vspace="0" border="0" alt="(10)" /></a>
} Elf32_Shdr;
               
</pre>
</td>
<td>
<pre class="PROGRAMLISTING">
typedef struct {
        Elf64_Word      sh_name;
        Elf64_Word      sh_type;
        Elf64_Xword     sh_flags;
        Elf64_Addr      sh_addr;
        Elf64_Off       sh_offset;
        Elf64_Xword     sh_size;
        Elf64_Word      sh_link;
        Elf64_Word      sh_info;
        Elf64_Xword     sh_addralign;
        Elf64_Xword     sh_entsize;
} Elf64_Shdr;
               
</pre>
</td>
</tr>
</tbody>
</table>
</div>
</div>

<div class="CALLOUTLIST">
<dl compact="COMPACT">
<dt><a href="#CO.32.SHNAME"><img src="./imagelib/callouts/1.png" hspace="0" vspace="0"
border="0" alt="(1)" /></a></dt>

<dd>The <code class="STRUCTFIELD">sh_name</code> field is used to encode a section's
name. As section names are variable length strings, they are not kept in the section
header table entry itself. Instead, all section names are collected into an object-wide
string table holding section names and the <code class="STRUCTFIELD">sh_name</code> field
of each section header stores an <span class="emphasis"><i
class="EMPHASIS">index</i></span> into the string table. The ELF Executable Header has an
<code class="STRUCTFIELD">e_shstrndx</code> member that points to the section index of
this string table.</dd>

<dd>
<p>ELF string tables, and the way to read them programmatically are described in <a
href="#SEC.SHDR.STRTAB">Section 5.2</a>.</p>
</dd>

<dt><a href="#CO.32.SHTYPE"><img src="./imagelib/callouts/2.png" hspace="0" vspace="0"
border="0" alt="(2)" /></a></dt>

<dd>The <code class="STRUCTFIELD">sh_type</code> field specifies the section type.
Section types are defined by the <code class="CONSTANT">SHT_*</code> constants defined in
<tt class="FILENAME">sys/elf_common.h</tt>. For example, a section of type <code
class="CONSTANT">SHT_PROGBITS</code> is defined to contain executable code, while a
section type <code class="CONSTANT">SHT_SYMTAB</code> denotes a section containing a
symbol table.</dd>

<dd>
<p>The ELF specification reserves values in the range <tt class="LITERAL">0x60000000</tt>
to <tt class="LITERAL">0x6FFFFFFF</tt> to denote OS-specific section types and values in
the range <tt class="LITERAL">0x70000000</tt> to <tt class="LITERAL">0x7FFFFFFF</tt> for
processor-specific section types. In addition, applications have been given the range <tt
class="LITERAL">0x80000000</tt> to <tt class="LITERAL">0xFFFFFFFF</tt> for their own
use.</p>
</dd>

<dt><a href="#CO.32.SHFLAGS"><img src="./imagelib/callouts/3.png" hspace="0" vspace="0"
border="0" alt="(3)" /></a></dt>

<dd>Section flags indicate whether a section has specific properties, e.g., whether it
contains writable data or instructions, or whether it has special link ordering
requirements. Flag values from <tt class="LITERAL">0x00100000</tt> to <tt
class="LITERAL">0x08000000</tt> (8 flags) are reserved for OS-specific uses. Flags values
from <tt class="LITERAL">0x10000000</tt> to <tt class="LITERAL">0x80000000</tt> (4 flags)
are reserved for processor specific uses.</dd>

<dt><a href="#CO.32.SHSIZE"><img src="./imagelib/callouts/6.png" hspace="0" vspace="0"
border="0" alt="(6)" /></a></dt>

<dd>The <code class="STRUCTFIELD">sh_size</code> member specifies the size of the section
in bytes.</dd>

<dt><a href="#CO.32.SHLINK"><img src="./imagelib/callouts/7.png" hspace="0" vspace="0"
border="0" alt="(7)" /></a><a href="#CO.32.SHINFO"><img src="./imagelib/callouts/8.png"
hspace="0" vspace="0" border="0" alt="(8)" /></a></dt>

<dd>The <code class="STRUCTFIELD">sh_link</code> and <code
class="STRUCTFIELD">sh_info</code> fields contain additional additional section specific
information. These fields are described in <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=5"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(5)</span></a>.</dd>

<dt><a href="#CO.32.SHADDRALIGN"><img src="./imagelib/callouts/9.png" hspace="0"
vspace="0" border="0" alt="(9)" /></a></dt>

<dd>For sections that have specific alignment requirements, the <code
class="STRUCTFIELD">sh_addralign</code> member holds the required alignment. Its value is
a power of two.</dd>

<dt><a href="#CO.32.SHENTSIZE"><img src="./imagelib/callouts/10.png" hspace="0"
vspace="0" border="0" alt="(10)" /></a></dt>

<dd>For sections that contain arrays of fixed-size elements, the <code
class="STRUCTFIELD">sh_entsize</code> member specifies the size of each element.</dd>
</dl>
</div>

<div class="FIGURE"><a id="FIG.ELF.SHDRLAYOUT" name="FIG.ELF.SHDRLAYOUT"></a>
<p><b>Figure 16. Section layout</b></p>

<p><img src="fig-shdrlayout.png" /></p>
</div>

<p>There are a couple of other quirks associated with ELF sections. Valid section indices
range from <code class="CONSTANT">SHN_UNDEF</code> (0) upto but not including <code
class="CONSTANT">SHN_LORESERVE</code> (0xFF00). Section indices between <tt
class="LITERAL">0xFF00</tt> and <tt class="LITERAL">0xFFFF</tt> are used to denote
special sections (like <b class="APPLICATION">FORTRAN</b> COMMON blocks). Thus if an ELF
file has more than 65279 (0xFEFF) sections, then it needs to use extended section
numbering (see <a href="#SEC.EXTENDED-NUMBERING">Section 3.1.3</a>).</p>

<p>The Section Header Table entry at index 0 (<code class="CONSTANT">SHN_UNDEF</code>) is
treated specially: it is always of type <code class="CONSTANT">SHT_NULL</code>. It has
its members set to zero except when extended numbering is in use, see <a
href="#SEC.EXTENDED-NUMBERING">Section 3.1.3</a>.</p>

<div class="SECT2">
<hr />
<h3 class="SECT2"><a id="SEC.SCN.TYPES" name="SEC.SCN.TYPES">5.1 ELF Section handling
with <span class="CITEREFENTRY">elf(3)</span></a></h3>

<p>You can conveniently retrieve the contents of sections and section headers using the
APIs in the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library.
Function <code class="FUNCTION">elf_getscn</code> will retrieve section information for a
requested section number. Iteration through the sections of an ELF file is possible using
function <code class="FUNCTION">elf_nextscn</code>. These routines will take care of
translating between in-file and in-memory representations, thus simplifying your
application.</p>

<p>In the <a href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> API set, ELF
sections are managed using <code class="STRUCTNAME">Elf_Scn</code> descriptors. There is
one <code class="STRUCTNAME">Elf_Scn</code> descriptor per ELF section in the ELF object.
Functions <code class="FUNCTION">elf_getscn</code> and <code
class="FUNCTION">elf_nextscn</code> retrieve pointers to <code
class="STRUCTNAME">Elf_Scn</code> descriptors for pre-existing sections in the ELF
object. (<a href="#SEC.CREATING-ELF">Section 6</a> covers the use of function <code
class="FUNCTION">elf_newscn</code> for allocating new sections).</p>

<p>Given a <code class="STRUCTNAME">Elf_Scn</code> descriptor the functions <code
class="FUNCTION">elf32_getshdr</code> and <code class="FUNCTION">elf64_getshdr</code>
retrieve the associated Section Header Table entry for the section. The <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=gelf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">gelf</span>(3)</span></a> API set offers
an equivalent ELF-class independent function <code
class="FUNCTION">gelf_getshdr</code>.</p>

<p>Each <code class="STRUCTNAME">Elf_Scn</code> descriptor can be associated with zero or
more <code class="STRUCTNAME">Elf_Data</code> descriptors. <code
class="STRUCTNAME">Elf_Data</code> descriptors describe regions of application memory
that contain the actual data in the ELF section. <code class="STRUCTNAME">Elf_Data</code>
descriptors for a given <code class="STRUCTNAME">Elf_Scn</code> descriptor are retrieved
using the <code class="FUNCTION">elf_getdata</code> function.</p>

<p><a href="#FIG.ELF.SCN">Figure 17</a> shows graphically how an <code
class="STRUCTNAME">Elf_Scn</code> descriptor could conceptually cover the content of a
section with <code class="STRUCTNAME">Elf_Data</code> descriptors.</p>

<div class="FIGURE"><a id="FIG.ELF.SCN" name="FIG.ELF.SCN"></a>
<p><b>Figure 17. Managing data in an Elf Section</b></p>

<p><img src="fig-scn.png" /></p>
</div>

<p><a href="#FIG.ELF.DATA">Figure 18</a> depicts how an <code
class="STRUCTNAME">Elf_Data</code> structure describes a chunk of application memory.
Note that the figure reflects the fact that the in-memory representation of data could
have a different size and endianness than its in-file representation.</p>

<div class="FIGURE"><a id="FIG.ELF.DATA" name="FIG.ELF.DATA"></a>
<p><b>Figure 18. <code class="STRUCTNAME">Elf_Data</code> descriptors</b></p>

<p><img src="fig-data.png" /></p>
</div>

<p><a href="#FIG.ELF.SCN-DATA.DECL">Figure 19</a> shows the C definition of the <code
class="STRUCTNAME">Elf_Scn</code> and <code class="STRUCTNAME">Elf_Data</code>
descriptors.</p>

<div class="FIGURE"><a id="FIG.ELF.SCN-DATA.DECL" name="FIG.ELF.SCN-DATA.DECL"></a>
<p><b>Figure 19. <code class="STRUCTNAME">Elf_Data</code> and <code
class="STRUCTNAME">Elf_Scn</code> descriptors</b></p>

<pre class="PROGRAMLISTING">
typedef struct _Elf_Scn Elf_Scn;                           <a id="AR.SCNDATA.SCN"
name="AR.SCNDATA.SCN"><img src="./imagelib/callouts/1.png" hspace="0" vspace="0"
border="0" alt="(1)" /></a>
typedef struct _Elf_Data {
        /*
         * `Public' members that are part of the ELF(3) API.
         */
        uint64_t        d_align;                           <a id="AR.SCNDATA.D-ALIGN"
name="AR.SCNDATA.D-ALIGN"><img src="./imagelib/callouts/2.png" hspace="0" vspace="0"
border="0" alt="(2)" /></a>
        void            *d_buf;                            <a id="AR.SCNDATA.D-BUF"
name="AR.SCNDATA.D-BUF"><img src="./imagelib/callouts/3.png" hspace="0" vspace="0"
border="0" alt="(3)" /></a>
        uint64_t        d_off;                             <a id="AR.SCNDATA.D-OFF"
name="AR.SCNDATA.D-OFF"><img src="./imagelib/callouts/4.png" hspace="0" vspace="0"
border="0" alt="(4)" /></a>
        uint64_t        d_size;                            <a id="AR.SCNDATA.D-SIZE"
name="AR.SCNDATA.D-SIZE"><img src="./imagelib/callouts/5.png" hspace="0" vspace="0"
border="0" alt="(5)" /></a>
        Elf_Type        d_type;                            <a id="AR.SCNDATA.D-TYPE"
name="AR.SCNDATA.D-TYPE"><img src="./imagelib/callouts/6.png" hspace="0" vspace="0"
border="0" alt="(6)" /></a>
        unsigned int    d_version;                         <a id="AR.SCNDATA.D-VERSION"
name="AR.SCNDATA.D-VERSION"><img src="./imagelib/callouts/7.png" hspace="0" vspace="0"
border="0" alt="(7)" /></a>
        /* ... other library-private fields ... */
} Elf_Data;
         
</pre>
</div>

<div class="CALLOUTLIST">
<dl compact="COMPACT">
<dt><a href="#AR.SCNDATA.SCN"><img src="./imagelib/callouts/1.png" hspace="0" vspace="0"
border="0" alt="(1)" /></a></dt>

<dd>The <code class="STRUCTNAME">Elf_Scn</code> type is opaque to the application.</dd>

<dt><a href="#AR.SCNDATA.D-ALIGN"><img src="./imagelib/callouts/2.png" hspace="0"
vspace="0" border="0" alt="(2)" /></a></dt>

<dd>The <code class="STRUCTFIELD">d_align</code> member specifies alignment of data
referenced in the <code class="STRUCTNAME">Elf_Data</code> with respect to its containing
section.</dd>

<dt><a href="#AR.SCNDATA.D-BUF"><img src="./imagelib/callouts/3.png" hspace="0"
vspace="0" border="0" alt="(3)" /></a></dt>

<dd>The <code class="STRUCTFIELD">d_buf</code> member points to a contiguous region of
memory holding data.</dd>

<dt><a href="#AR.SCNDATA.D-OFF"><img src="./imagelib/callouts/4.png" hspace="0"
vspace="0" border="0" alt="(4)" /></a></dt>

<dd>The <code class="STRUCTFIELD">d_off</code> member contains the file offset <span
class="emphasis"><i class="EMPHASIS">from the start of the section</i></span> of the data
in this buffer. This field is usually managed by the library, but is under application
control if the application has requested full control of the ELF file's layout (see <a
href="#SEC.CREATING-ELF">Section 6</a>).</dd>

<dt><a href="#AR.SCNDATA.D-SIZE"><img src="./imagelib/callouts/5.png" hspace="0"
vspace="0" border="0" alt="(5)" /></a></dt>

<dd>The <code class="STRUCTFIELD">d_size</code> member contains the size of the memory
buffer.</dd>

<dt><a href="#AR.SCNDATA.D-TYPE"><img src="./imagelib/callouts/6.png" hspace="0"
vspace="0" border="0" alt="(6)" /></a></dt>

<dd>The <code class="STRUCTFIELD">d_type</code> member specifies the ELF type of the data
contained in the data buffer. Legal values for this member are precisely those defined by
the <span class="TYPE">Elf_Type</span> enumeration in <tt
class="FILENAME">libelf.h</tt>.</dd>

<dt><a href="#AR.SCNDATA.D-VERSION"><img src="./imagelib/callouts/7.png" hspace="0"
vspace="0" border="0" alt="(7)" /></a></dt>

<dd>The <code class="STRUCTFIELD">d_version</code> member specifies the working version
for the data in this descriptor. It must be one of the values supported by the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library.</dd>
</dl>
</div>

<p>Before we look at example program we need to understand how string tables are
implemented by <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a>.</p>
</div>

<div class="SECT2">
<hr />
<h3 class="SECT2"><a id="SEC.SHDR.STRTAB" name="SEC.SHDR.STRTAB">5.2 String
Tables</a></h3>

<p>String tables hold variable length strings allowing other structures in an ELF object
to refer to strings by their offsets into the string table's contents. <a
href="#FIG.ELF.STRTAB">Figure 20</a> shows the layout of a string table graphically.</p>

<p>Sections containing string tables have type <code
class="CONSTANT">SHT_STRTAB</code>.</p>

<div class="FIGURE"><a id="FIG.ELF.STRTAB" name="FIG.ELF.STRTAB"></a>
<p><b>Figure 20. String Table Layout</b></p>

<p><img src="fig-strtab.png" /></p>
</div>

<p><a href="#FIG.ELF.STRTAB">Figure 20</a> illustrates the following points:</p>

<ul>
<li>
<p>The initial byte of a string table is <code class="CONSTANT">NUL</code> (a <tt
class="LITERAL">'\0'</tt>). This allows an string offset value of zero to denote the NULL
string.</p>
</li>

<li>
<p>Subsequent strings are separated by <code class="CONSTANT">NUL</code> bytes.</p>
</li>

<li>
<p>The final byte in the section is again a <code class="CONSTANT">NUL</code> so as to
terminate the last string in the string table.</p>
</li>
</ul>

<p>An ELF file can have multiple string tables; for example, section names could be kept
in one string table and symbol names in another.</p>

<p>Given the section index of a section containing a string table, applications would use
the <code class="FUNCTION">elf_strptr</code> function to convert a string offset to <span
class="TYPE">char *</span> pointer usable by C code.</p>
</div>

<div class="SECT2">
<hr />
<h3 class="SECT2"><a id="AEN1071" name="AEN1071">5.3 Listing section names</a></h3>

<p>Let us now write a program that would retrieve and print the names of the sections
present in an ELF object.</p>

<div class="HIGHLIGHTS"><a id="AEN1074" name="AEN1074"></a>
<p>This example will show you how to use:</p>

<ul>
<li>
<p>Functions <code class="FUNCTION">elf_nextscn</code> and <code
class="FUNCTION">elf_getscn</code> to retrieve <code class="STRUCTNAME">Elf_Scn</code>
descriptors.</p>
</li>

<li>
<p>Function <code class="FUNCTION">gelf_getshdr</code> to retrieve a Section Header Table
entry corresponding to a section descriptor.</p>
</li>

<li>
<p>Function <code class="FUNCTION">elf_strptr</code> to convert section name indices to
NUL-terminated strings.</p>
</li>

<li>
<p>Function <code class="FUNCTION">elf_getdata</code> to retrieve translated data
associated with a section.</p>
</li>
</ul>
</div>

<div class="FIGURE"><a id="SRC.PROG.4" name="SRC.PROG.4"></a>
<p><b>Figure 21. Printing section names</b></p>

<pre class="PROGRAMLISTING">
/*
 * Print the names of ELF sections.
 */

#include &lt;err.h&#62;
#include &lt;fcntl.h&#62;
#include &lt;gelf.h&#62;
#include &lt;stdio.h&#62;
#include &lt;stdint.h&#62;
#include &lt;stdlib.h&#62;
#include &lt;sysexits.h&#62;
#include &lt;unistd.h&#62;
#include &lt;vis.h&#62;

int
main(int argc, char **argv)
{
        int fd;
        Elf *e;
        char *name, *p, pc[4*sizeof(char)];
        Elf_Scn *scn;
        Elf_Data *data;
        GElf_Shdr shdr;
        size_t n, shstrndx, sz;

        if (argc != 2)
                errx(EX_USAGE, "usage: %s file-name", getprogname());

        if (elf_version(EV_CURRENT) == EV_NONE)
                errx(EX_SOFTWARE, "ELF library initialization failed: %s",
                    elf_errmsg(-1));

        if ((fd = open(argv[1], O_RDONLY, 0)) &lt; 0)
                err(EX_NOINPUT, "open \%s\" failed", argv[1]);

        if ((e = elf_begin(fd, ELF_C_READ, NULL)) == NULL)
                errx(EX_SOFTWARE, "elf_begin() failed: %s.",
                    elf_errmsg(-1));

        if (elf_kind(e) != ELF_K_ELF)
                errx(EX_DATAERR, "%s is not an ELF object.", argv[1]);

        if (elf_getshstrndx(e, &amp;shstrndx) == 0) <a id="CO.SCN.GETSHSTRNDX"
name="CO.SCN.GETSHSTRNDX"><img src="./imagelib/callouts/1.png" hspace="0" vspace="0"
border="0" alt="(1)" /></a>
                errx(EX_SOFTWARE, "getshstrndx() failed: %s.",
                    elf_errmsg(-1));

        scn = NULL; <a id="CO.SCN.SCN-NULL" name="CO.SCN.SCN-NULL"><img
src="./imagelib/callouts/2.png" hspace="0" vspace="0" border="0" alt="(2)" /></a>
        while ((scn = elf_nextscn(e, scn)) != NULL) { <a id="CO.SCN.NEXTSCN"
name="CO.SCN.NEXTSCN"><img src="./imagelib/callouts/3.png" hspace="0" vspace="0"
border="0" alt="(3)" /></a>
                if (gelf_getshdr(scn, &amp;shdr) != &amp;shdr) <a id="CO.SCN.GETSHDR"
name="CO.SCN.GETSHDR"><img src="./imagelib/callouts/4.png" hspace="0" vspace="0"
border="0" alt="(4)" /></a>
                        errx(EX_SOFTWARE, "getshdr() failed: %s.",
                            elf_errmsg(-1));

                if ((name = elf_strptr(e, shstrndx, shdr.sh_name)) == NULL) <a
id="CO.SCN.STRPTR" name="CO.SCN.STRPTR"><img src="./imagelib/callouts/5.png" hspace="0"
vspace="0" border="0" alt="(5)" /></a>
                        errx(EX_SOFTWARE, "elf_strptr() failed: %s.",
                            elf_errmsg(-1));

                (void) printf("Section %-4.4jd %s\n", (uintmax_t) elf_ndxscn(scn),
                    name);
        }

        if ((scn = elf_getscn(e, shstrndx)) == NULL)         <a
id="CO.SCN.GETSHSTRNDXSCN" name="CO.SCN.GETSHSTRNDXSCN"><img
src="./imagelib/callouts/6.png" hspace="0" vspace="0" border="0" alt="(6)" /></a>
                errx(EX_SOFTWARE, "getscn() failed: %s.",
                    elf_errmsg(-1));

        if (gelf_getshdr(scn, &amp;shdr) != &amp;shdr)
                errx(EX_SOFTWARE, "getshdr(shstrndx) failed: %s.",
                    elf_errmsg(-1));

        (void) printf(".shstrab: size=%jd\n", (uintmax_t) shdr.sh_size);

        data = NULL; n = 0;
        while (n &#60; shdr.sh_size &#38;&#38; (data = elf_getdata(scn, data)) != NULL) { <a
 id="CO.SCN.GETDATA" name="CO.SCN.GETDATA"><img src="./imagelib/callouts/7.png"
hspace="0" vspace="0" border="0" alt="(7)" /></a>
                p = (char *) data-&#62;d_buf;
                while (p &lt; (char *) data-&#62;d_buf + data-&#62;d_size) {
                        if (vis(pc, *p, VIS_WHITE, 0))
                                printf("%s", pc);
                        n++; p++;
                        (void) putchar((n % 16) ? ' ' : '\n');
                }
        }
        (void) putchar('\n');

        (void) elf_end(e);
        (void) close(fd);
        exit(EX_OK);
}
       
</pre>
</div>

<div class="CALLOUTLIST">
<dl compact="COMPACT">
<dt><a href="#CO.SCN.GETSHSTRNDX"><img src="./imagelib/callouts/1.png" hspace="0"
vspace="0" border="0" alt="(1)" /></a></dt>

<dd>We need to know that section index of the string table index for using with function
<code class="FUNCTION">elf_strptr</code>. We retrieve this using function <code
class="FUNCTION">elf_getshstrndx</code> so that our program will work correctly when the
object being examined has a very large number of sections.</dd>

<dt><a href="#CO.SCN.SCN-NULL"><img src="./imagelib/callouts/2.png" hspace="0" vspace="0"
border="0" alt="(2)" /></a></dt>

<dd>Function <code class="FUNCTION">elf_nextscn</code> has the useful property that it
returns the pointer to section number 1 if a NULL section pointer is passed in. Recall
that section number 0 is always of type <code class="CONSTANT">SHT_NULL</code> and not
very interesting to applications.</dd>

<dt><a href="#CO.SCN.NEXTSCN"><img src="./imagelib/callouts/3.png" hspace="0" vspace="0"
border="0" alt="(3)" /></a></dt>

<dd>We loop over all sections in the ELF object. Function <code
class="FUNCTION">elf_nextscn</code> will return NULL at the end, which is a convenient
way to exit the processing loop.</dd>

<dt><a href="#CO.SCN.GETSHDR"><img src="./imagelib/callouts/4.png" hspace="0" vspace="0"
border="0" alt="(4)" /></a></dt>

<dd>Given a <code class="STRUCTNAME">Elf_Scn</code> pointer, we retrieve the associated
section header using function <code class="FUNCTION">gelf_getshdr</code>. The <code
class="STRUCTFIELD">sh_name</code> member of this structure holds the required offset
into the section name string table.</dd>

<dt><a href="#CO.SCN.STRPTR"><img src="./imagelib/callouts/5.png" hspace="0" vspace="0"
border="0" alt="(5)" /></a></dt>

<dd>We convert the string offset in member <code class="STRUCTFIELD">sh_name</code> to a
<span class="TYPE">char *</span> pointer using function <code
class="FUNCTION">elf_strptr</code>. This value is then printed using <code
class="FUNCTION">printf</code>.</dd>

<dt><a href="#CO.SCN.GETSHSTRNDXSCN"><img src="./imagelib/callouts/6.png" hspace="0"
vspace="0" border="0" alt="(6)" /></a></dt>

<dd>We retrieve the section descriptor associate with the string table holding section
names. Variable <code class="VARNAME">shstrndx</code> was retrieved by a prior call to
function <code class="FUNCTION">elf_getshstrndx</code>.</dd>

<dt><a href="#CO.SCN.GETDATA"><img src="./imagelib/callouts/7.png" hspace="0" vspace="0"
border="0" alt="(7)" /></a></dt>

<dd>We cycle through the <code class="STRUCTNAME">Elf_Data</code> descriptors associated
with the section in question, printing the characters in each data buffer.</dd>
</dl>
</div>

<p>Save the listing in <a href="#SRC.PROG.4">Figure 21</a> to file <tt
class="FILENAME">prog4.c</tt> and then compile and run it as shown in <a
href="#SCR.PROG4">Figure 22</a>.</p>

<div class="FIGURE"><a id="SCR.PROG4" name="SCR.PROG4"></a>
<p><b>Figure 22. Compiling and Running <tt class="COMMAND">prog4</tt></b></p>

<pre class="SCREEN">
% cc -o prog4 prog4.c -lelf <a id="CO.PROG4.COMPILE" name="CO.PROG4.COMPILE"><img
src="./imagelib/callouts/1.png" hspace="0" vspace="0" border="0" alt="(1)" /></a>
% ./prog4 prog4 <a id="CO.PROG4.RUN" name="CO.PROG4.RUN"><img
src="./imagelib/callouts/2.png" hspace="0" vspace="0" border="0" alt="(2)" /></a>
Section 0001 .interp
Section 0002 .note.ABI-tag
Section 0003 .hash
Section 0004 .dynsym
Section 0005 .dynstr
Section 0006 .rela.plt
Section 0007 .init
Section 0008 .plt
Section 0009 .text
Section 0010 .fini
Section 0011 .rodata
Section 0012 .data
Section 0013 .eh_frame
Section 0014 .dynamic
Section 0015 .ctors
Section 0016 .dtors
Section 0017 .jcr
Section 0018 .got
Section 0019 .bss
Section 0020 .comment
Section 0021 .shstrtab <a id="CO.PROG4.SHSTRTAB" name="CO.PROG4.SHSTRTAB"><img
src="./imagelib/callouts/3.png" hspace="0" vspace="0" border="0" alt="(3)" /></a>
Section 0022 .symtab
Section 0023 .strtab
.shstrab: size=287 <a id="CO.PROG4.STRTAB" name="CO.PROG4.STRTAB"><img
src="./imagelib/callouts/4.png" hspace="0" vspace="0" border="0" alt="(4)" /></a>
\^@ . s y m t a b \^@ . s t r t a b
\^@ . s h s t r t a b \^@ . i n t e
r p \^@ . h a s h \^@ . d y n s y m
\^@ . d y n s t r \^@ . g n u . v e
r s i o n \^@ . g n u . v e r s i
o n _ r \^@ . r e l a . d y n \^@ .
r e l a . p l t \^@ . i n i t \^@ .
t e x t \^@ . f i n i \^@ . r o d a
t a \^@ . d a t a \^@ . e h _ f r a
m e \^@ . d y n a m i c \^@ . c t o
r s \^@ . d t o r s \^@ . j c r \^@ .
g o t \^@ . b s s \^@ . c o m m e n
t \^@ . d e b u g _ a r a n g e s
\^@ . d e b u g _ p u b n a m e s
\^@ . d e b u g _ i n f o \^@ . d e
b u g _ a b b r e v \^@ . d e b u
g _ l i n e \^@ . d e b u g _ f r
a m e \^@ . d e b u g _ s t r \^@
       
</pre>
</div>

<div class="CALLOUTLIST">
<dl compact="COMPACT">
<dt><a href="#CO.PROG4.COMPILE"><img src="./imagelib/callouts/1.png" hspace="0"
vspace="0" border="0" alt="(1)" /></a></dt>

<dd>Compile and link the program in the standard way.</dd>

<dt><a href="#CO.PROG4.RUN"><img src="./imagelib/callouts/2.png" hspace="0" vspace="0"
border="0" alt="(2)" /></a></dt>

<dd>We make our program print the names of its own sections.</dd>

<dt><a href="#CO.PROG4.SHSTRTAB"><img src="./imagelib/callouts/3.png" hspace="0"
vspace="0" border="0" alt="(3)" /></a></dt>

<dd>One of the sections contains the string table used for sections names themselves.
This section is called <tt class="LITERAL">.shstrtab</tt> by convention.</dd>

<dt><a href="#CO.PROG4.STRTAB"><img src="./imagelib/callouts/4.png" hspace="0" vspace="0"
border="0" alt="(4)" /></a></dt>

<dd>This is the content of the string table holding section names.</dd>
</dl>
</div>
</div>
</div>

<div class="SECT1">
<hr />
<h2 class="SECT1"><a id="SEC.CREATING-ELF" name="SEC.CREATING-ELF">6 Creating new ELF
objects</a></h2>

<p>We will now look at how ELF objects can be created (and modified, see <a
href="#SEC.MODIFYING-ELF">Section 6.1.4</a>) using the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library.</p>

<p>Broadly speaking, the steps involved in creating an ELF file with <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> are:</p>

<ol type="1">
<li>
<p>An ELF descriptor needs to be allocated with a call to function <code
class="FUNCTION">elf_begin</code>, passing in the parameter <code
class="CONSTANT">ELF_C_WRITE</code>.</p>
</li>

<li>
<p>You would then allocate an ELF Executable Header using one of the <code
class="FUNCTION">elf32_newehdr</code>, <code class="FUNCTION">elf64_newehdr</code> or
<code class="FUNCTION">gelf_newehdr</code> functions. Note that this is a mandatory step
since an ELF Executable Header is always present in an ELF object. The ELF
&#8220;class&#8221;, of the object, i.e., whether the object is a 32-bit or 64-bit one,
is fixed at this time.</p>
</li>

<li>
<p>An ELF Program Header Table is optional and can be allocated using one of functions
<code class="FUNCTION">elf32_newphdr</code>, <code class="FUNCTION">elf64_newphdr</code>
or <code class="FUNCTION">gelf_newphdr</code>. The Program Header Table can be allocated
anytime after the Executable Header has been allocated.</p>
</li>

<li>
<p>Sections may be added to an ELF object using function <code
class="FUNCTION">elf_newscn</code>. <code class="STRUCTNAME">Elf_Data</code> descriptors
associated with an ELF section can be added to a section descriptor using function <code
class="FUNCTION">elf_newdata</code>. ELF sections can be allocated anytime after the
object's Executable Header has been allocated.</p>
</li>

<li>
<p>If you are creating an ELF object for a non-native architecture, you can change the
byte ordering of the object by changing the byte order byte at offset <code
class="CONSTANT">EI_DATA</code> in the ELF header.</p>
</li>

<li>
<p>Once your data is in place, you then ask the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library to
write out the final ELF object using function <code
class="FUNCTION">elf_update</code>.</p>
</li>

<li>
<p>Finally, you close the ELF descriptor allocated using function <code
class="FUNCTION">elf_end</code>.</p>
</li>
</ol>

<p>In <a href="#SRC.PROG.5">Figure 23</a> we will look at a program that creates a simple
ELF object with a program header table, one ELF section containing translatable data and
one ELF section containing a section name string table. We will mark the ELF of the
object as using a 32-bit, MSB-first data ordering.</p>

<div class="FIGURE"><a id="SRC.PROG.5" name="SRC.PROG.5"></a>
<p><b>Figure 23. Creating an ELF object</b></p>

<pre class="PROGRAMLISTING">
/*
 * Create an ELF object.
 */

#include &lt;err.h&#62;
#include &lt;fcntl.h&#62;
#include &lt;libelf.h&#62; <a id="CO.CREATE.ELF.H" name="CO.CREATE.ELF.H"><img
src="./imagelib/callouts/1.png" hspace="0" vspace="0" border="0" alt="(1)" /></a>
#include &lt;stdio.h&#62;
#include &lt;stdlib.h&#62;
#include &lt;sysexits.h&#62;
#include &lt;unistd.h&#62;

uint32_t hash_words[] = { <a id="CO.CREATE.HASH" name="CO.CREATE.HASH"><img
src="./imagelib/callouts/2.png" hspace="0" vspace="0" border="0" alt="(2)" /></a>
        0x01234567,
        0x89abcdef,
        0xdeadc0de
};

char string_table[] = { <a id="CO.CREATE.STRTAB" name="CO.CREATE.STRTAB"><img
src="./imagelib/callouts/3.png" hspace="0" vspace="0" border="0" alt="(3)" /></a>
        /* Offset 0 */  '\0',
        /* Offset 1 */  '.', 'f', 'o', 'o', '\0',
        /* Offset 6 */  '.', 's', 'h', 's', 't', 'r', 't', 'a', 'b', '\0'
};

int
main(int argc, char **argv)
{
        int fd;
        Elf *e;
        Elf_Scn *scn;
        Elf_Data *data;
        Elf32_Ehdr *ehdr;
        Elf32_Phdr *phdr;
        Elf32_Shdr *shdr;

        if (argc != 2)
                errx(EX_USAGE, "usage: %s file-name", getprogname());

        if (elf_version(EV_CURRENT) == EV_NONE)
                errx(EX_SOFTWARE, "ELF library initialization failed: %s",
                    elf_errmsg(-1));

        if ((fd = open(argv[1], O_WRONLY|O_CREAT, 0777)) &lt; 0) <a id="CO.CREATE.OPEN"
name="CO.CREATE.OPEN"><img src="./imagelib/callouts/4.png" hspace="0" vspace="0"
border="0" alt="(4)" /></a>
                err(EX_OSERR, "open \%s\" failed", argv[1]);

        if ((e = elf_begin(fd, ELF_C_WRITE, NULL)) == NULL) <a id="CO.CREATE.ELFBEGIN"
name="CO.CREATE.ELFBEGIN"><img src="./imagelib/callouts/5.png" hspace="0" vspace="0"
border="0" alt="(5)" /></a>
                errx(EX_SOFTWARE, "elf_begin() failed: %s.",
                    elf_errmsg(-1));

        if ((ehdr = elf32_newehdr(e)) == NULL) <a id="CO.CREATE.NEWEHDR"
name="CO.CREATE.NEWEHDR"><img src="./imagelib/callouts/6.png" hspace="0" vspace="0"
border="0" alt="(6)" /></a>
                errx(EX_SOFTWARE, "elf32_newehdr() failed: %s.",
                    elf_errmsg(-1));

        ehdr-&#62;e_ident[EI_DATA] = ELFDATA2MSB;
        ehdr-&#62;e_machine = EM_PPC; /* i.e., a 32 bit PowerPC executable */
        ehdr-&#62;e_type = ET_EXEC;

        if ((phdr = elf32_newphdr(e, 1)) == NULL) <a id="CO.CREATE.NEWPHDR"
name="CO.CREATE.NEWPHDR"><img src="./imagelib/callouts/7.png" hspace="0" vspace="0"
border="0" alt="(7)" /></a>
                errx(EX_SOFTWARE, "elf32_newphdr() failed: %s.",
                    elf_errmsg(-1));

        if ((scn = elf_newscn(e)) == NULL) <a id="CO.CREATE.SCN-WORDS"
name="CO.CREATE.SCN-WORDS"><img src="./imagelib/callouts/8.png" hspace="0" vspace="0"
border="0" alt="(8)" /></a>
                errx(EX_SOFTWARE, "elf_newscn() failed: %s.",
                    elf_errmsg(-1));

        if ((data = elf_newdata(scn)) == NULL)
                errx(EX_SOFTWARE, "elf_newdata() failed: %s.",
                    elf_errmsg(-1));

        data-&#62;d_align = 4;
        data-&#62;d_off  = 0LL;
        data-&#62;d_buf  = hash_words;
        data-&#62;d_type = ELF_T_WORD;
        data-&#62;d_size = sizeof(hash_words);
        data-&#62;d_version = EV_CURRENT;

        if ((shdr = elf32_getshdr(scn)) == NULL)
                errx(EX_SOFTWARE, "elf32_getshdr() failed: %s.",
                    elf_errmsg(-1));

        shdr-&#62;sh_name = 1;
        shdr-&#62;sh_type = SHT_HASH;
        shdr-&#62;sh_flags = SHF_ALLOC;
        shdr-&#62;sh_entsize = 0;

        if ((scn = elf_newscn(e)) == NULL) <a id="CO.CREATE.SCN-STRTAB"
name="CO.CREATE.SCN-STRTAB"><img src="./imagelib/callouts/9.png" hspace="0" vspace="0"
border="0" alt="(9)" /></a>
                errx(EX_SOFTWARE, "elf_newscn() failed: %s.",
                    elf_errmsg(-1));

        if ((data = elf_newdata(scn)) == NULL)
                errx(EX_SOFTWARE, "elf_newdata() failed: %s.",
                    elf_errmsg(-1));

        data-&#62;d_align = 1;
        data-&#62;d_buf = string_table;
        data-&#62;d_off = 0LL;
        data-&#62;d_size = sizeof(string_table);
        data-&#62;d_type = ELF_T_BYTE;
        data-&#62;d_version = EV_CURRENT;

        if ((shdr = elf32_getshdr(scn)) == NULL)
                errx(EX_SOFTWARE, "elf32_getshdr() failed: %s.",
                    elf_errmsg(-1));

        shdr-&#62;sh_name = 6;
        shdr-&#62;sh_type = SHT_STRTAB;
        shdr-&#62;sh_flags = SHF_STRINGS | SHF_ALLOC;
        shdr-&#62;sh_entsize = 0;

        elf_setshstrndx(e, elf_ndxscn(scn)); <a id="CO.CREATE.SETSHSTRNDX"
name="CO.CREATE.SETSHSTRNDX"><img src="./imagelib/callouts/10.png" hspace="0" vspace="0"
border="0" alt="(10)" /></a>

        if (elf_update(e, ELF_C_NULL) &lt; 0) <a id="CO.CREATE.ELF-UPDATE-1"
name="CO.CREATE.ELF-UPDATE-1"><img src="./imagelib/callouts/11.png" hspace="0" vspace="0"
border="0" alt="(11)" /></a>
                errx(EX_SOFTWARE, "elf_update(NULL) failed: %s.",
                    elf_errmsg(-1));

        phdr-&#62;p_type = PT_PHDR;
        phdr-&#62;p_offset = ehdr-&#62;e_phoff;
        phdr-&#62;p_filesz = elf32_fsize(ELF_T_PHDR, 1, EV_CURRENT);

        (void) elf_flagphdr(e, ELF_C_SET, ELF_F_DIRTY);

        if (elf_update(e, ELF_C_WRITE) &lt; 0) <a id="CO.CREATE.ELF-UPDATE-2"
name="CO.CREATE.ELF-UPDATE-2"><img src="./imagelib/callouts/12.png" hspace="0" vspace="0"
border="0" alt="(12)" /></a>
                errx(EX_SOFTWARE, "elf_update() failed: %s.",
                    elf_errmsg(-1));

        (void) elf_end(e);
        (void) close(fd);

        exit(EX_OK);
}
     
</pre>
</div>

<div class="CALLOUTLIST">
<dl compact="COMPACT">
<dt><a href="#CO.CREATE.ELF.H"><img src="./imagelib/callouts/1.png" hspace="0" vspace="0"
border="0" alt="(1)" /></a></dt>

<dd>We include <tt class="FILENAME">libelf.h</tt> to bring in prototypes for <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a>'s
functions.</dd>

<dt><a href="#CO.CREATE.HASH"><img src="./imagelib/callouts/2.png" hspace="0" vspace="0"
border="0" alt="(2)" /></a></dt>

<dd>We will create an ELF section containing 'hash' values. These values are present in
host-native order in the array <code class="VARNAME">hash_words</code>. These values will
be translated to the appropriate byte order by the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library when
the object file is created.</dd>

<dt><a href="#CO.CREATE.STRTAB"><img src="./imagelib/callouts/3.png" hspace="0"
vspace="0" border="0" alt="(3)" /></a></dt>

<dd>We use a pre-fabricated ELF string table to hold section names. See <a
href="#SEC.SHDR.STRTAB">Section 5.2</a> for more information on the layout of ELF string
tables.</dd>

<dt><a href="#CO.CREATE.OPEN"><img src="./imagelib/callouts/4.png" hspace="0" vspace="0"
border="0" alt="(4)" /></a></dt>

<dd>The first step to create an ELF object is to obtain a file descriptor from the OS
that is opened for writing.</dd>

<dt><a href="#CO.CREATE.ELFBEGIN"><img src="./imagelib/callouts/5.png" hspace="0"
vspace="0" border="0" alt="(5)" /></a></dt>

<dd>By passing parameter <code class="CONSTANT">ELF_C_WRITE</code> to function <code
class="FUNCTION">elf_begin</code>, we obtain an ELF descriptor suitable for creating new
ELF objects.</dd>

<dt><a href="#CO.CREATE.NEWEHDR"><img src="./imagelib/callouts/6.png" hspace="0"
vspace="0" border="0" alt="(6)" /></a></dt>

<dd>We allocate an ELF Executable Header and set the <code
class="CONSTANT">EI_DATA</code> byte in its <code class="STRUCTFIELD">e_ident</code>
member. The machine type is set to <code class="CONSTANT">EM_PPC</code> denoting the
PowerPC architecture, and the object is marked as an ELF executable.</dd>

<dt><a href="#CO.CREATE.NEWPHDR"><img src="./imagelib/callouts/7.png" hspace="0"
vspace="0" border="0" alt="(7)" /></a></dt>

<dd>We allocate an ELF Program Header table with one entry. At this point of time we do
not know how the ELF object will be laid out so we don't know where the ELF Program
Header Table will reside. We will update this entry later.</dd>

<dt><a href="#CO.CREATE.SCN-WORDS"><img src="./imagelib/callouts/8.png" hspace="0"
vspace="0" border="0" alt="(8)" /></a></dt>

<dd>We create a section descriptor for the section containing the 'hash' values, and
associate the data in the <code class="VARNAME">hash_words</code> array with this
descriptor. The type of the section is set to <code class="CONSTANT">SHT_HASH</code>. The
library will compute its size and location in the final object and will byte-swap the
values when creating the ELF object.</dd>

<dt><a href="#CO.CREATE.SCN-STRTAB"><img src="./imagelib/callouts/9.png" hspace="0"
vspace="0" border="0" alt="(9)" /></a></dt>

<dd>We allocate another section for holding the string table. We use the pre-fabricated
string table in variable <code class="VARNAME">string_table</code>. The type of the
section is set to <code class="CONSTANT">SHT_STRTAB</code>. Its offset and size in the
file will be computed by the library.</dd>

<dt><a href="#CO.CREATE.SETSHSTRNDX"><img src="./imagelib/callouts/10.png" hspace="0"
vspace="0" border="0" alt="(10)" /></a></dt>

<dd>We set the string table index field in the ELF Executable Header using the function
<code class="FUNCTION">elf_setshstrndx</code>.</dd>

<dt><a href="#CO.CREATE.ELF-UPDATE-1"><img src="./imagelib/callouts/11.png" hspace="0"
vspace="0" border="0" alt="(11)" /></a></dt>

<dd>Calling function <code class="FUNCTION">elf_update</code> with parameter <code
class="CONSTANT">ELF_C_NULL</code> causes the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library to
compute the layout of the object, updating all internal data structures, but <span
class="emphasis"><i class="EMPHASIS">not</i></span> write it out. We can thus fill in the
values in the ELF Program Header Table entry that we had allocated using the new values
in the Executable Header after this call to <code class="FUNCTION">elf_update</code>. The
Program Header Table is then marked &#8220;dirty&#8221; using a call to function <code
class="FUNCTION">elf_flagdata</code>, so that a subsequent call to <code
class="FUNCTION">elf_update</code> will use the new contents.</dd>

<dt><a href="#CO.CREATE.ELF-UPDATE-2"><img src="./imagelib/callouts/12.png" hspace="0"
vspace="0" border="0" alt="(12)" /></a></dt>

<dd>A call to function <code class="FUNCTION">elf_update</code> with parameter <code
class="CONSTANT">ELF_C_WRITE</code> causes the object file to be written out.</dd>
</dl>
</div>

<p>Save the listing in <a href="#SRC.PROG.5">Figure 23</a> to file <tt
class="FILENAME">prog5.c</tt> and then compile and run it as shown in <a
href="#SCR.PROG5">Figure 24</a>.</p>

<div class="FIGURE"><a id="SCR.PROG5" name="SCR.PROG5"></a>
<p><b>Figure 24. Compiling and Running <tt class="COMMAND">prog5</tt></b></p>

<pre class="SCREEN">
% cc -o prog5 prog5.c -lelf <a id="CO.PROG5.COMPILE" name="CO.PROG5.COMPILE"><img
src="./imagelib/callouts/1.png" hspace="0" vspace="0" border="0" alt="(1)" /></a>
% ./prog5 foo
% file foo <a id="CO.PROG5.FILE" name="CO.PROG5.FILE"><img
src="./imagelib/callouts/2.png" hspace="0" vspace="0" border="0" alt="(2)" /></a>
foo: ELF 32-bit MSB executable, PowerPC or cisco 4500, version 1 (SYSV), statically linked, stripped
% readelf -a foo <a id="CO.PROG5.READELF" name="CO.PROG5.READELF"><img
src="./imagelib/callouts/3.png" hspace="0" vspace="0" border="0" alt="(3)" /></a>
ELF Header:
  Magic:   7f 45 4c 46 01 02 01 00 00 00 00 00 00 00 00 00
  Class:                             ELF32
  Data:                              2's complement, big endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           PowerPC
  Version:                           0x1
  Entry point address:               0x0
  Start of program headers:          52 (bytes into file)
  Start of section headers:          112 (bytes into file)
  Flags:                             0x0
  Size of this header:               52 (bytes)
  Size of program headers:           32 (bytes)
  Number of program headers:         1
  Size of section headers:           40 (bytes)
  Number of section headers:         3
  Section header string table index: 2

Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
  [ 1] .foo              HASH            00000000 000054 00000c 04   A  0   0  4
  [ 2] .shstrtab         STRTAB          00000000 000060 000010 00  AS  0   0  1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings)
  I (info), L (link order), G (group), x (unknown)
  O (extra OS processing required) o (OS specific), p (processor specific)

Program Headers:
  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
  PHDR           0x000034 0x00000000 0x00000000 0x00020 0x00000     0

 Section to Segment mapping:
  Segment Sections...
   00

There is no dynamic segment in this file.

There are no relocations in this file.

There are no unwind sections in this file.

No version information found in this file.
     
</pre>
</div>

<div class="CALLOUTLIST">
<dl compact="COMPACT">
<dt><a href="#CO.PROG5.COMPILE"><img src="./imagelib/callouts/1.png" hspace="0"
vspace="0" border="0" alt="(1)" /></a></dt>

<dd>Compile, link and run the program in the standard way.</dd>

<dt><a href="#CO.PROG5.FILE"><img src="./imagelib/callouts/2.png" hspace="0" vspace="0"
border="0" alt="(2)" /></a><a href="#CO.PROG5.READELF"><img
src="./imagelib/callouts/3.png" hspace="0" vspace="0" border="0" alt="(3)" /></a></dt>

<dd>We use the <tt class="COMMAND">file</tt> and <tt class="COMMAND">readelf</tt>
programs to examine the object that we have created.</dd>
</dl>
</div>

<div class="SECT2">
<hr />
<h3 class="SECT2"><a id="AEN1288" name="AEN1288">6.1 The finer points</a></h3>

<p>Some of the finer points in creating ELF objects using the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library are
examined below. We cover memory management rules, ELF data structure lifetimes, how an
application can take full control over an object's layout. We also briefly cover how an
existing ELF object would be modified.</p>

<div class="SECT3">
<hr />
<h4 class="SECT3"><a id="AEN1294" name="AEN1294">6.1.1 Controlling ELF Layout</a></h4>

<p>By default, the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library will
lay out your ELF objects for you. The default layout is shown in <a
href="#FIG.ELF.LAYOUT">Figure 4</a>. An application may request fine-grained control over
the ELF object's layout by setting the flag <code class="CONSTANT">ELF_F_LAYOUT</code> on
the ELF descriptor using function <code class="FUNCTION">elf_flagelf</code>.</p>

<p>Once an ELF descriptor has been flagged with flag <code
class="CONSTANT">ELF_F_LAYOUT</code> the following members of the ELF data structures
come under application control:</p>

<ul>
<li>
<p>The <code class="STRUCTFIELD">e_phoff</code> and <code
class="STRUCTFIELD">e_shoff</code> fields, which determine whether the ELF Program Header
Table and Section Header Table start.</p>
</li>

<li>
<p>For each section, the <code class="STRUCTFIELD">sh_addralign</code>, <code
class="STRUCTFIELD">sh_offset</code>, and <code class="STRUCTFIELD">sh_size</code> fields
in its section header.</p>
</li>
</ul>

<p>These fields must set prior to calling function <code
class="FUNCTION">elf_update</code>.</p>

<p>The library will fill &#8220;gaps&#8221; between parts of the ELF file with a <i
class="FIRSTTERM">fill character</i>. An application may set the fill character using the
function <code class="FUNCTION">elf_fill</code>. The default fill character is a zero
byte.</p>
</div>

<div class="SECT3">
<hr />
<h4 class="SECT3"><a id="AEN1321" name="AEN1321">6.1.2 Memory Management</a></h4>

<p>Applications pass pointers to allocated memory to the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library by
setting the <code class="STRUCTFIELD">d_buf</code> members of <code
class="STRUCTNAME">Elf_Data</code> structures passed to the library. The <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library also
passes data back to the application using the same mechanism. In order to keep tracking
memory ownership simple, the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library follows
the rule that it will <span class="emphasis"><i class="EMPHASIS">never</i></span> attempt
to free data that it did not allocate. Conversely, the application is also expected to
<span class="emphasis"><i class="EMPHASIS">not</i></span> free memory allocated by the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library.</p>
</div>

<div class="SECT3">
<hr />
<h4 class="SECT3"><a id="AEN1340" name="AEN1340">6.1.3 <span
class="CITEREFENTRY">elf(3)</span> data structure lifetimes</a></h4>

<p>As part of the process of writing out an ELF object, the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library may
release or reallocate its internal bookkeeping structures.</p>

<p>A rule to be followed when using the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library is that
all pointers to returned data structures (e.g., pointers to <code
class="STRUCTNAME">Elf_Scn</code> and <code class="STRUCTNAME">Elf_Data</code> structures
or to other ELF headers <span class="emphasis"><i class="EMPHASIS">become
invalid</i></span> after a call to function <code class="FUNCTION">elf_update</code> with
parameter <code class="CONSTANT">ELF_C_WRITE</code>.</p>

<p>After a successful call to function <code class="FUNCTION">elf_update</code> all ELF
data structures will need to be retrieved afresh.</p>
</div>

<div class="SECT3">
<hr />
<h4 class="SECT3"><a id="SEC.MODIFYING-ELF" name="SEC.MODIFYING-ELF">6.1.4 Modifying
existing ELF objects</a></h4>

<p>The <a href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library also
allows existing ELF objects to be modified. The process is similar to that for creating
ELF objects, the differences being:</p>

<ul>
<li>
<p>The underlying file object would need to be opened for reading and writing, and the
call to function <code class="FUNCTION">elf_begin</code> would use parameter <code
class="CONSTANT">ELF_C_RDWR</code> instead of <code
class="CONSTANT">ELF_C_WRITE</code>.</p>
</li>

<li>
<p>The application would use the <code class="FUNCTION">elf_get*</code> APIs to retrieve
existing ELF data structures in addition to the <code class="FUNCTION">elf_new*</code>
APIs used for allocating new data structures. The <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library would
be informed of modifications to ELF data structures by calls to the appropriate <code
class="FUNCTION">elf_flag*</code> functions.</p>
</li>
</ul>

<p>The rest of the program flow would be similar to the object creation case.</p>
</div>
</div>
</div>

<div class="SECT1">
<hr />
<h2 class="SECT1"><a id="SEC.AR" name="SEC.AR">7 Processing ar(1) archives</a></h2>

<p>The <a href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library also
offers support for reading archives members in an <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> archive. This
support is &#8220;read-only&#8221;; you cannot create new <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> archives or
update members in an archive using these functions. The <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library
supports both random and sequential access to the members of an <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> archive.</p>

<p>Each <a href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> archive starts
with a sequence of 8 signature bytes (see the constant <code
class="CONSTANT">ARMAG</code> defined in the system header <tt
class="FILENAME">ar.h</tt>). The members of the archive follow, each member preceded by
an <i class="FIRSTTERM">archive header</i> describing the metadata associated with the
member. <a href="#FIG.ARSTR">Figure 25</a> depicts the structure of an <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> archive
pictorially.</p>

<div class="FIGURE"><a id="FIG.ARSTR" name="FIG.ARSTR"></a>
<p><b>Figure 25. The structure of ar(1) archives</b></p>

<p><img src="fig-arstr.png" /></p>
</div>

<p>Each archive header is a collection of fixed size ASCII strings. Archive headers are
required to reside at even offsets in the archive file. <a href="#SRC.ARHDR">Figure
26</a> shows the layout of the archive header as a C structure.</p>

<div class="FIGURE"><a id="SRC.ARHDR" name="SRC.ARHDR"></a>
<p><b>Figure 26. The <code class="STRUCTNAME">ar_hdr</code> structure.</b></p>

<pre class="PROGRAMLISTING">
struct ar_hdr {
        char ar_name[16];               /* file name */
        char ar_date[12];               /* file modification time */
        char ar_uid[6];                 /* creator user id */
        char ar_gid[6];                 /* creator group id */
        char ar_mode[8];                /* octal file permissions */
        char ar_size[10];               /* size in bytes */
#define        ARFMAG   "`\n"
        char ar_fmag[2];                /* consistency check */
} __packed;
     
</pre>
</div>

<p>The initial members of an <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> archive may be
special:</p>

<ul>
<li>
<p>An archive member with name &#8220;/&#8221; is an <i class="FIRSTTERM">archive symbol
table</i>. An archive symbol table maps program symbols to archive members in an archive.
It is usually maintained by tools like <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=ranlib&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ranlib</span>(1)</span></a> and <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a>.</p>
</li>

<li>
<p>An archive member with name &#8220;//&#8221; is an <i class="FIRSTTERM">archive string
table</i>. The members of an <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> header only
contain fixed size ASCII strings with space and '/' characters being used for string
termination. File names that exceed the length limits of the <code
class="STRUCTFIELD">ar_name</code> member are handled by placing them in a special string
table (not to be confused with ELF string tables) and storing the offset of the file name
in the <code class="STRUCTFIELD">ar_name</code> member as a string of decimal digits.</p>
</li>
</ul>

<p>The archive handling functions offered by the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library
insulate the application from these details of the layout of <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> archives.</p>

<div class="SECT2">
<hr />
<h3 class="SECT2"><a id="AEN1453" name="AEN1453">7.1 Sequential iteration through an
<span class="CITEREFENTRY">ar(1)</span> archive</a></h3>

<p>We now illustrate (<a href="#SRC.PROG.6">Figure 28</a>) how an application may iterate
through the members of an <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> archive. The
steps involved are:</p>

<ol type="1">
<li>
<p>Archives are opened using <code class="FUNCTION">elf_begin</code> in the usual
way.</p>
</li>

<li>
<p>Each archive managed by the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library tracks
the next member to opened. This information is updated using the functions <code
class="FUNCTION">elf_next</code> and <code class="FUNCTION">elf_rand</code>.</p>
</li>

<li>
<p>Nested calls to function <code class="FUNCTION">elf_begin</code> retrieve ELF
descriptors for the members in the archive.</p>
</li>
</ol>

<p><a href="#FIG.ARITER">Figure 27</a> pictorially depicts how functions <code
class="FUNCTION">elf_begin</code> and <code class="FUNCTION">elf_next</code> are used to
step through an <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> archive.</p>

<div class="FIGURE"><a id="FIG.ARITER" name="FIG.ARITER"></a>
<p><b>Figure 27. Iterating through <span class="CITEREFENTRY"><span
class="REFENTRYTITLE">ar</span>(1)</span> archives with <code
class="FUNCTION">elf_begin</code> and <code class="FUNCTION">elf_next</code></b></p>

<p><img src="fig-ariter.png" /></p>
</div>

<p>We now look at an example program that illustrates these concepts.</p>

<div class="FIGURE"><a id="SRC.PROG.6" name="SRC.PROG.6"></a>
<p><b>Figure 28. Iteration through an <span class="CITEREFENTRY"><span
class="REFENTRYTITLE">ar</span>(1)</span> archive</b></p>

<pre class="PROGRAMLISTING">
/*
 * Iterate through an ar(1) archive.
 */

#include &lt;err.h&#62;
#include &lt;fcntl.h&#62;
#include &lt;libelf.h&#62;
#include &lt;stdio.h&#62;
#include &lt;stdlib.h&#62;
#include &lt;sysexits.h&#62;
#include &lt;unistd.h&#62;

int
main(int argc, char **argv)
{
        int fd;
        Elf *ar, *e;
        Elf_Arhdr *arh;

        if (argc != 2)
                errx(EX_USAGE, "usage: %s file-name", getprogname());

        if (elf_version(EV_CURRENT) == EV_NONE)
                errx(EX_SOFTWARE, "ELF library initialization failed: %s",
                    elf_errmsg(-1));

        if ((fd = open(argv[1], O_RDONLY, 0)) &lt; 0)
                err(EX_NOINPUT, "open \%s\" failed", argv[1]);

        if ((fd = open(argv[1], O_RDONLY, 0)) &lt; 0) <a id="CO.PROG6.OPEN"
name="CO.PROG6.OPEN"><img src="./imagelib/callouts/1.png" hspace="0" vspace="0"
border="0" alt="(1)" /></a>
                err(EX_NOINPUT, "open \%s\" failed", argv[1]);

        if ((ar = elf_begin(fd, ELF_C_READ, NULL)) == NULL) <a id="CO.PROG6.BEGIN"
name="CO.PROG6.BEGIN"><img src="./imagelib/callouts/2.png" hspace="0" vspace="0"
border="0" alt="(2)" /></a>
                errx(EX_SOFTWARE, "elf_begin() failed: %s.",
                    elf_errmsg(-1));

        if (elf_kind(ar) != ELF_K_AR)
                errx(EX_DATAERR, "%s is not an ar(1) archive.", argv[1]);

        while ((e = elf_begin(fd, ELF_C_READ, ar)) != NULL) { <a id="CO.PROG6.ITER"
name="CO.PROG6.ITER"><img src="./imagelib/callouts/3.png" hspace="0" vspace="0"
border="0" alt="(3)" /></a>

                if ((arh = elf_getarhdr(e)) == NULL) <a id="CO.PROG6.GETHDR"
name="CO.PROG6.GETHDR"><img src="./imagelib/callouts/4.png" hspace="0" vspace="0"
border="0" alt="(4)" /></a>
                        errx(EX_SOFTWARE, "elf_getarhdr() failed: %s.",
                            elf_errmsg(-1));

                (void) printf("%20s %d\n", arh-&#62;ar_name, arh-&#62;ar_size);

                (void) elf_next(e); <a id="CO.PROG6.NEXT" name="CO.PROG6.NEXT"><img
src="./imagelib/callouts/5.png" hspace="0" vspace="0" border="0" alt="(5)" /></a>
                (void) elf_end(e); <a id="CO.PROG6.END" name="CO.PROG6.END"><img
src="./imagelib/callouts/6.png" hspace="0" vspace="0" border="0" alt="(6)" /></a>
        }

        (void) elf_end(ar);
        (void) close(fd);
        exit(0);
}
       
</pre>
</div>

<div class="CALLOUTLIST">
<dl compact="COMPACT">
<dt><a href="#CO.PROG6.OPEN"><img src="./imagelib/callouts/1.png" hspace="0" vspace="0"
border="0" alt="(1)" /></a><a href="#CO.PROG6.BEGIN"><img src="./imagelib/callouts/2.png"
hspace="0" vspace="0" border="0" alt="(2)" /></a></dt>

<dd>We open the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> archive for
reading and obtain a descriptor in the usual manner.</dd>

<dt><a href="#CO.PROG6.ITER"><img src="./imagelib/callouts/3.png" hspace="0" vspace="0"
border="0" alt="(3)" /></a></dt>

<dd>Function <code class="FUNCTION">elf_begin</code> is used to the iterate through the
members of the archive. The third parameter in the call to <code
class="FUNCTION">elf_begin</code> is a pointer to the descriptor for the archive itself.
The return value of function <code class="FUNCTION">elf_begin</code> is a descriptor that
references an archive member.</dd>

<dt><a href="#CO.PROG6.GETHDR"><img src="./imagelib/callouts/4.png" hspace="0" vspace="0"
border="0" alt="(4)" /></a></dt>

<dd>We retrieve the translated <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> header using
function <code class="FUNCTION">elf_getarhdr</code>. We then print out the name and size
of the member. Note that function <code class="FUNCTION">elf_getarhdr</code> translates
names to null-terminated C strings suitable for use with <code
class="FUNCTION">printf</code>.</dd>

<dd>
<p><a href="#FIG.ARHDR">Figure 29</a> shows the translated information returned by
function <code class="FUNCTION">elf_getarhdr</code>.</p>
</dd>

<dd>
<div class="FIGURE"><a id="FIG.ARHDR" name="FIG.ARHDR"></a>
<p><b>Figure 29. The <code class="STRUCTNAME">Elf_Arhdr</code> structure</b></p>

<pre class="PROGRAMLISTING">
typedef struct {
        time_t          ar_date;        /* time of creation */
        char            *ar_name;       /* archive member name */
        gid_t           ar_gid;         /* creator's group */
        mode_t          ar_mode;        /* file creation mode */
        char            *ar_rawname;    /* 'raw' member name */
        size_t          ar_size;        /* member size in bytes */
        uid_t           ar_uid;         /* creator's user id */
} Elf_Arhdr;
           
</pre>
</div>
</dd>

<dt><a href="#CO.PROG6.NEXT"><img src="./imagelib/callouts/5.png" hspace="0" vspace="0"
border="0" alt="(5)" /></a></dt>

<dd>The <code class="FUNCTION">elf_next</code> function sets up the <span
class="emphasis"><i class="EMPHASIS">parent</i></span> archive descriptor (referenced by
variable <code class="VARNAME">ar</code> in this example) to return the next archive
member on the next call to function <code class="FUNCTION">elf_begin</code>.</dd>

<dt><a href="#CO.PROG6.END"><img src="./imagelib/callouts/6.png" hspace="0" vspace="0"
border="0" alt="(6)" /></a></dt>

<dd>It is good programming practice to call <code class="FUNCTION">elf_end</code> on
descriptors that are no longer needed.</dd>
</dl>
</div>

<p>Save the listing in <a href="#SRC.PROG.6">Figure 28</a> to file <tt
class="FILENAME">prog6.c</tt> and then compile and run it as shown in <a
href="#SCR.PROG6">Figure 30</a>.</p>

<div class="FIGURE"><a id="SCR.PROG6" name="SCR.PROG6"></a>
<p><b>Figure 30. Compiling and Running <tt class="COMMAND">prog6</tt></b></p>

<pre class="SCREEN">
% cc -o prog6 prog6.c -lelf <a id="CO.PROG6.COMPILE" name="CO.PROG6.COMPILE"><img
src="./imagelib/callouts/1.png" hspace="0" vspace="0" border="0" alt="(1)" /></a>
% ./prog6 /usr/lib/librt.a <a id="CO.PROG6.RUN" name="CO.PROG6.RUN"><img
src="./imagelib/callouts/2.png" hspace="0" vspace="0" border="0" alt="(2)" /></a>
             timer.o 7552
                mq.o 8980
               aio.o 8212
      sigev_thread.o 15528
       
</pre>
</div>

<div class="CALLOUTLIST">
<dl compact="COMPACT">
<dt><a href="#CO.PROG6.COMPILE"><img src="./imagelib/callouts/1.png" hspace="0"
vspace="0" border="0" alt="(1)" /></a></dt>

<dd>Compile and link the program in the usual fashion.</dd>

<dt><a href="#CO.PROG6.RUN"><img src="./imagelib/callouts/2.png" hspace="0" vspace="0"
border="0" alt="(2)" /></a></dt>

<dd>We run the program against a small library and get a list of its members..</dd>
</dl>
</div>
</div>

<div class="SECT2">
<hr />
<h3 class="SECT2"><a id="AEN1557" name="AEN1557">7.2 Random access in an <span
class="CITEREFENTRY">ar(1)</span> archive</a></h3>

<p>Random access in the archive is supported by the function <code
class="FUNCTION">elf_rand</code>. However, in order to use this function you need to know
the file offsets in the archive for the desired archive member. For archives containing
object files this information is present in the archive symbol table.</p>

<p>If an archive has an archive symbol table, it can be retrieved using the function
<code class="FUNCTION">elf_getarsym</code>. Function <code
class="FUNCTION">elf_getarsym</code> returns an array of <code
class="STRUCTNAME">Elf_Arsym</code> structures. Each <code
class="STRUCTNAME">Elf_Arsym</code> structure (<a href="#FIG.ARSYM">Figure 31</a>) maps
one program symbol to the file offset inside the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> archive of the
member that contains its definition.</p>

<div class="FIGURE"><a id="FIG.ARSYM" name="FIG.ARSYM"></a>
<p><b>Figure 31. The <code class="STRUCTNAME">Elf_Arsym</code> structure</b></p>

<pre class="PROGRAMLISTING">
typedef struct {
        off_t           as_off;    /* byte offset to member's header */
        unsigned long   as_hash;   /* elf_hash() value for name */
        char            *as_name;  /* null terminated symbol name */
} Elf_Arsym;
       
</pre>
</div>

<p>Once the file offset of the member is known, the function <code
class="FUNCTION">elf_rand</code> can be used to set the parent archive to open the
desired archive member at the next call to <code class="FUNCTION">elf_begin</code>.</p>
</div>
</div>

<div class="SECT1">
<hr />
<h2 class="SECT1"><a id="CONCLUSION" name="CONCLUSION">8 Conclusion</a></h2>

<div class="HIGHLIGHTS"><a id="AEN1582" name="AEN1582"></a>
<p>This tutorial covered the following topics:</p>

<ul>
<li>
<p>We gained an overview of the facilities for manipulating ELF objects offered by the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> and <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=gelf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">gelf</span>(3)</span></a> API sets.</p>
</li>

<li>
<p>We studied the basics of the ELF format, including the key data structures involved
and their layout inside ELF objects.</p>
</li>

<li>
<p>We looked at example programs that retrieve ELF data structures from existing ELF
objects.</p>
</li>

<li>
<p>We looked at how to create new ELF objects using the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> library.</p>
</li>

<li>
<p>We looked at accessing information in the <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=ar&amp;amp;sektion=1"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">ar</span>(1)</span></a> archives.</p>
</li>
</ul>
</div>

<div class="SECT2">
<hr />
<h3 class="SECT2"><a id="AEN1607" name="AEN1607">8.1 Further Reading</a></h3>

<p>There are very few books today on the topic of linking and loading. John Levine's
[<span class="CITATION">Levine1999</span>] book, &#8220;<a href="http://linker.iecc.com/"
target="_top">Linkers and Loaders</a>&#8221; is a readable book that offers a overview of
the concepts involved in the process of linking and loading object files.</p>

<p>On the Web, Peter Seebach's DeveloperWorks article &#8220;<a
href="http://www-128.ibm.com/developerworks/power/library/pa-spec12/index.html"
target="_top">An unsung hero: The hardworking ELF</a>&#8221; covers the history and
features of the ELF format. Other tutorials include Hongjiu Liu's &#8220;<a
href="http://linux4u.jinr.ru/usoft/WWW/www_debian.org/Documentation/elf/elf.html"
target="_top">ELF: From The Programmer's Perspective</a>&#8221;, which covers GCC and GNU
ld, and Michael L. Haungs' &#8220;<a
href="http://www.cs.ucdavis.edu/~haungs/paper/node10.html" target="_top">The Executable
and Linking Format (ELF)</a>&#8221;.</p>

<p>Neelakanth Nadgir's <a href="http://developers.sun.com/solaris/articles/elf.html"
target="_top">tutorial on ELF(3) and GELF(3)</a> is a readable and brief introduction to
the <a href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> and <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=gelf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">gelf</span>(3)</span></a> APIs for
Solaris&trade;.</p>

<p>The <a href="http://docsun.cites.uiuc.edu/sun_docs/C/solaris_9/SUNWdev/LLM/toc.html"
target="_top">Linkers and Libraries Guide</a> from Sun Microsystems&reg; describes
linking and loading tools in Solaris&trade;. Chapter 7 of this book, &#8220;Object File
Format&#8221; contains a readable introduction to the ELF format.</p>

<p>The current specification of the ELF format, the &#8220;<a
href="http://www.x86.org/ftp/manuals/tools/elf.pdf" target="_top">Tool Interface Standard
(TIS) Executable and Linking Format (ELF) Specification, Version 1.2</a>&#8221; is freely
available to download.</p>

<p>FreeBSD's manual page for <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=5"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(5)</span></a> contains a
concise overview of the data structures in an ELF file. FreeBSD's <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=elf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">elf</span>(3)</span></a> and <a
href="http://www.FreeBSD.org/cgi/man.cgi?query=gelf&amp;amp;sektion=3"><span
class="CITEREFENTRY"><span class="REFENTRYTITLE">gelf</span>(3)</span></a> manual pages
cover the ELF(3) and GELF(3) API set and may be used as a launching point for further
reading.</p>
</div>
</div>

<a id="AEN1644" name="AEN1644"></a>
<hr />
<h1><a id="AEN1644" name="AEN1644"></a>Bibliography</h1>

<hr />
<h2 class="BIBLIODIV"><a id="AEN1647" name="AEN1647">Books</a></h2>

<div class="BIBLIOENTRY"><a id="AEN1649" name="AEN1649"></a>
<p><span class="AUTHOR">John R. Levine</span>, 1999, <i>Linkers and Loaders</i>,
1-55860-496-0, Morgan-Kauffman.</p>
</div>
</div>

<hr />
<p align="center"><small>This, and other documents, can be downloaded from <a
href="ftp://ftp.FreeBSD.org/pub/FreeBSD/doc/">ftp://ftp.FreeBSD.org/pub/FreeBSD/doc/</a>.</small></p>

<p align="center"><small>For questions about FreeBSD, read the <a
href="http://www.FreeBSD.org/docs.html">documentation</a> before contacting &#60;<a
href="mailto:questions@FreeBSD.org">questions@FreeBSD.org</a>&#62;.<br />
For questions about this documentation, e-mail &#60;<a
href="mailto:doc@FreeBSD.org">doc@FreeBSD.org</a>&#62;.</small></p>
</body>
</html>


------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=docbook.css
Content-Type: text/css; charset=iso-8859-1; name=docbook.css
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/docbook.css
Content-Transfer-Encoding: 8bit

/*
 * Copyright (c) 2001, 2003 The FreeBSD Documentation Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: doc/share/misc/docbook.css,v 1.8 2006/02/26 13:16:52 ceri Exp $
 */

BODY ADDRESS {
	line-height: 1.3;
	margin: .6em 0;
}

BODY BLOCKQUOTE {
	margin-top: .75em;
	line-height: 1.5;
	margin-bottom: .75em;
}

HTML BODY {
	margin: 1em 8% 1em 10%;
	line-height: 1.2;
}

.LEGALNOTICE {
	font-size: small;
	font-variant: small-caps;
}

BODY DIV {
	margin: 0;
}

DL {
	margin: .8em 0;
	line-height: 1.2;
}

BODY FORM {
	margin: .6em 0;
}

H1, H2, H3, H4, H5, H6,
DIV.EXAMPLE P B,
.QUESTION,
DIV.TABLE P B,
DIV.PROCEDURE P B {
	color: #990000;
}

BODY H1, BODY H2, BODY H3, BODY H4, BODY H5, BODY H6 {
	line-height: 1.3;
	margin-left: 0;
}

BODY H1, BODY H2 {
	margin: .8em 0 0 -4%;
}

BODY H3, BODY H4 {
	margin: .8em 0 0 -3%;
}

BODY H5 {
	margin: .8em 0 0 -2%;
}

BODY H6 {
	margin: .8em 0 0 -1%;
}

BODY HR {
	margin: .6em;
}

BODY IMG.NAVHEADER {
	margin: 0 0 0 -4%;
}

OL {
	margin: 0 0 0 5%;
	line-height: 1.2;
}

BODY PRE {
	margin: .75em 0;
	line-height: 1.0;
	color: #461b7e;
}

BODY TD, BODY TH {
	line-height: 1.2;
}

UL, BODY DIR, BODY MENU {
	margin: 0 0 0 5%;
	line-height: 1.2;
}

HTML {
	margin: 0; 
	padding: 0;
}

.FILENAME {
	color: #007a00;
}

.GUIMENU, .GUIMENUITEM, .GUISUBMENU,
.GUILABEL, .INTERFACE, .GUIBUTTON,
.SHORTCUT, .SHORTCUT .KEYCAP {
	background-color: #F0F0F0;
}

.ACCEL {
	background-color: #F0F0F0;
	text-decoration: underline;
} 

.PROGRAMLISTING, .SCREEN {
	margin-left: 3ex;
}

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=1.png
Content-Type: image/png; name=1.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/imagelib/callouts/1.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAAAAABzHgM7AAAAY0lEQVR42lWOsQ3A
MAgEv6T0Gi4pvUJmo3TpNiNkjazBCJQESKIoFPAnpP+Hu83R2ljmDlcGqAOsDgsN
OWOxQYBNLSFkPrAXMCjPKqA/8AecBi/IY33c1q4dNRkadYSJxow6F8B4LBbswVS0
AAAASHRFWHRTb2Z0d2FyZQBAKCMpSW1hZ2VNYWdpY2sgNS4xLjEgMDAvMDIvMDEg
UToxNiBjcmlzdHlAbXlzdGljLmVzLmR1cG9udC5jb20OSxG4AAAAKnRFWHRTaWdu
YXR1cmUAN2JjZWU2YmFjNDUzYTk3ODBlOWIwYmRiNWZkMjRmNjGmiymYAAAAAElF
TkSuQmCC

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=2.png
Content-Type: image/png; name=2.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/imagelib/callouts/2.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAAAAABzHgM7AAAAe0lEQVR42h2OoRXD
MAxEPzQ0LDUsFPQKXaOwsNArCAaGZoSs0BECSw0LBVXJR6R7uvd1uNvWa+27ueNT
4N5ApmNCu+bvUxFD4bhoFlOJkA74nhGkkBJ7E+syj3mWNBFDbaxzAl72FLklIND7
DI1Er6crFE+jjkopfYs6f1TZNWCfL3+jAAAASHRFWHRTb2Z0d2FyZQBAKCMpSW1h
Z2VNYWdpY2sgNS4xLjEgMDAvMDIvMDEgUToxNiBjcmlzdHlAbXlzdGljLmVzLmR1
cG9udC5jb20OSxG4AAAAKnRFWHRTaWduYXR1cmUAODUzNjQ3OTNhYzE4YWM4NGZi
ZDI3YWM5MWRhYTZiOGOvJdh8AAAAAElFTkSuQmCC

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=3.png
Content-Type: image/png; name=3.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/imagelib/callouts/3.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAAAAABzHgM7AAAAeElEQVR42iVOqxXD
QAwTNPQagYZepbQwsCsUHgzsCge7RmBgqGGgoSunJpbe0w9Vubmqf7IKFQZxF1gU
0qDnce4KSwzgFaK1gtAAXXAT6sGbcfDLn/gz1yaUPejbvy0jGJf59e6Ajp6ZUzq6
YsFt7FLOGSZqG+f8AFG4NWP8641MAAAASHRFWHRTb2Z0d2FyZQBAKCMpSW1hZ2VN
YWdpY2sgNS4xLjEgMDAvMDIvMDEgUToxNiBjcmlzdHlAbXlzdGljLmVzLmR1cG9u
dC5jb20OSxG4AAAAKnRFWHRTaWduYXR1cmUAYjk5MDliODMyNDVhYmNhNDE0ZWRj
NjVhMzk3Zjg5YjXitQCNAAAAAElFTkSuQmCC

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=4.png
Content-Type: image/png; name=4.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/imagelib/callouts/4.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAAAAABzHgM7AAAAc0lEQVR42h2NIRKF
MBBDI5GVWGRlZa9QicQikVyj8stvK3slbGXlyrAhYue92cwEJPseY2kOoBUAMSAP
F3HhDWRDdw5Dgh/06G1KElbgGMEki8s272h1lRScVJpqfjxfrcKy5Ll8y8D5mfPj
o7R/CkuqRr7qBjaOW+q8wwAAAEh0RVh0U29mdHdhcmUAQCgjKUltYWdlTWFnaWNr
IDUuMS4xIDAwLzAyLzAxIFE6MTYgY3Jpc3R5QG15c3RpYy5lcy5kdXBvbnQuY29t
DksRuAAAACp0RVh0U2lnbmF0dXJlAGM4OWM4MzlkNDY5ZTJlNTQwZTQ0ZTk1MzE2
ODMzNWJlZunfzAAAAABJRU5ErkJggg==

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=5.png
Content-Type: image/png; name=5.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/imagelib/callouts/5.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAAAAABzHgM7AAAAdklEQVR42hWOoRHE
MAwEDwoahhoaGqoFl/D1GAYahgZ+K19CaKCg4f1JbGd29gSSlx/Fz02C4dZabdYf
gcMZEQNt44bAkHdiJHx/U9xxJMzxXoAl1CklEqSVD7De1BToHPVZGVAaM/ZdMq1R
2Wq1HCWXm/V85w8jWzcvQl9/+wAAAEh0RVh0U29mdHdhcmUAQCgjKUltYWdlTWFn
aWNrIDUuMS4xIDAwLzAyLzAxIFE6MTYgY3Jpc3R5QG15c3RpYy5lcy5kdXBvbnQu
Y29tDksRuAAAACp0RVh0U2lnbmF0dXJlAGU1N2ExYWM1YWU0OGEyMGVhZTNmZGNk
ODc3ZDYwMGI5JCAcTQAAAABJRU5ErkJggg==

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=6.png
Content-Type: image/png; name=6.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/imagelib/callouts/6.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAAAAABzHgM7AAAAfUlEQVR42hWNIRLD
MAwEFwoWmgYKBvoLgf1GYb5QGFhYapgnlAb6CaGGgoKqzG7nbvaIiPOpurUMhG9Q
FOpIyNxsXEJ1TtitFKvwIYuraRVgpcCw3vsDZMLdEdsn5OzXoL/nLMPLlmUeHPjU
uGehTkyppEzvPA3/VpH18Ig/s3M46gq4G1kAAABIdEVYdFNvZnR3YXJlAEAoIylJ
bWFnZU1hZ2ljayA1LjEuMSAwMC8wMi8wMSBROjE2IGNyaXN0eUBteXN0aWMuZXMu
ZHVwb250LmNvbQ5LEbgAAAAqdEVYdFNpZ25hdHVyZQA1NGM4MzEwZDU4NmU5OTRi
YjNiMmI1NTllNmYwMjUyM9FBG0gAAAAASUVORK5CYII=

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=7.png
Content-Type: image/png; name=7.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/imagelib/callouts/7.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAAAAABzHgM7AAAAcklEQVR42iWOrQGF
MAyET1YiWSGyshaJrOxMlU++FZCVrMEKSGTkkSuJSL7k8gOSo5rth5Og12UNX8od
0HBElxey44RsvRvwQ5swVCvIyqsrpA+ugQmSFVZBhmrdk6CDe4xPlTn4bHMfTEfJ
f0nJerzzAj42Mb9HEFZTAAAASHRFWHRTb2Z0d2FyZQBAKCMpSW1hZ2VNYWdpY2sg
NS4xLjEgMDAvMDIvMDEgUToxNiBjcmlzdHlAbXlzdGljLmVzLmR1cG9udC5jb20O
SxG4AAAAKnRFWHRTaWduYXR1cmUAYmFmOTJlNDg3ZTkzZDFhMGZhOTgwODIyYTAw
ZWM5ZGWsTFXmAAAAAElFTkSuQmCC

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=8.png
Content-Type: image/png; name=8.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/imagelib/callouts/8.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAAAAABzHgM7AAAAf0lEQVR42h2OoRXD
MAwFDwoalhoGBoYaGgZ2hcKs0BG8gmFgoNcIDDU0NFSlCuk/3bsvVPXcl7hXW9CR
IUTYuoUE9blbYJ1UyDPQDygYlGaQ8YGVF3D15xYQD++5Z7+IY7XB2RwzwTGW2L8u
MLWUPoq4+l/qsw0rVa05xuTv/ACjnzm6RmLtDgAAAEh0RVh0U29mdHdhcmUAQCgj
KUltYWdlTWFnaWNrIDUuMS4xIDAwLzAyLzAxIFE6MTYgY3Jpc3R5QG15c3RpYy5l
cy5kdXBvbnQuY29tDksRuAAAACp0RVh0U2lnbmF0dXJlADNiY2M0YWU5ZTNhNzc4
ZjQwMDk1ZGVlZmE2ZTUyYjVlCPhFkQAAAABJRU5ErkJggg==

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=9.png
Content-Type: image/png; name=9.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/imagelib/callouts/9.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAAAAABzHgM7AAAAf0lEQVR42hWOIRaE
MAwFR0ZWYpHISiyyErlXWInkCsheAVm5kmtUYisrI7OpyXuTPy/5mFnZl3kvaobp
BiHA2h0SUmq7nZQCxyuTfiCT4PZFHRETnCN5QAaEp7f2G+C3EJGaIeLupnOyFS7U
Z7H+hUWxHoft0utPzXIMEi+v8weMUDhi2dL7FwAAAEh0RVh0U29mdHdhcmUAQCgj
KUltYWdlTWFnaWNrIDUuMS4xIDAwLzAyLzAxIFE6MTYgY3Jpc3R5QG15c3RpYy5l
cy5kdXBvbnQuY29tDksRuAAAACp0RVh0U2lnbmF0dXJlAGFmYTM4YzA4ZDQ3Yzlk
YWI3MjdjYmRmMTlmMzIxODI420o1zwAAAABJRU5ErkJggg==

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=fig-versions.png
Content-Type: image/png; name=fig-versions.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/fig-versions.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAgIAAAAcCAAAAAA2bYjSAAAISUlEQVRoge2bf2xb
VxXHP3ELFYzZBNT1n1R0rdiDvWhQ0bi12yGVhsqRBkg1jf9YW7INp0KV1jLnj0nr
wppqUgY2S6uhiphRthZQXFIQtIrHWrUDEfdXSJH8uj1G0wk/iZWsify6qvTHGv54
7/lH8uzcF/vlH/j+c6/PO++cc+89795z7z1umOL/+N/GwpL62Lt3XVbmb3RXAVwa
5dPuahhdufFj7mqAkfddVrCotVhvMGeBy38Yv90se91VrGWv31y8zT03OJ6587Db
bQBFWXj1+c+4Jv4N5fa15oBr4g0oyoJFSx436qYLHH17s8tKLei/WfeYO5LH92yQ
3ZE8E68+/B13BE/0rXB7+C1oJ3ctBtMFJn78taZ50gtkrj0jwrZqpHFi1QjCscqv
Lz41d5scQxntEWGzGjEpOPUNvfVt12exIo586THAA0zs3jaPHkDgq0+LsF3ovcyF
3okjglPumWsCHqDoRpkWk1kF8pZuETazES+NbBeSeubyk/PoAWy+cwzDBfqeFH3H
6sLa4F3/mghb50uM0bh5Ukjmvdc3GhUtKUmSJCW0pJQpIwDKJi88kSS9c052l2Ol
g0Z0th4RYb53auPcbJmrS8t/uwoeOL7CzvNSNmKtLpwBO1o1zZcmBLgaGevvFBVZ
cOOmKKqqnpSbogTKCIAMcDBKyJG1FeCkEY0nekVE9n19OqWaQ0Mm4ZfCCb3g0t0J
QdsL2LwfGqZ4zjayCXsPziRK6kxaei4dekwkHJjcvry3uGepistDxe/HMrJgbNFq
SQXdW6BohfVPm8tKeOBlAabJ7ct7GRkTibb/nrGJBCUVtGyovDVaNgQoyT7gieaY
7bggNDTavx73cPYh27d7lAyAZnIWn0xbC5TuMpqGEP4twtSY6oUGGgRYj60p+6lP
/xz0wsqttAAkJH+a1IZ0dyIRlsJGTZfSZPwOlrolIkyNqV7Gnm0XiWh+VWkv0DR9
KA1CMgQQGS7SM2VcikC40vQ+HuxcDxQ5MgSkNiT8/pRVgNmFCb8UTpMIS2HieSmh
tIDSKoUVMhtSfklgOvriO7PzGJiaEpkF7pauZZLUki17KkktOatu7BujaiROO8Ge
WH5QzRo1b2QYOeIgHLt7R5Bx+ZtTIotGJXGVHHo4BBDKYrq01t0BuySpVTMGKJ4X
GIrbeLhn90AJEk1r0E70XLTfKsDowoR8Tg35yA+qWQ6ixmSg+6gqxwnQfu5o/+yt
lc/PzuMEH5X+UFW1jXLC+WA5v5doDvBCVyplEKBzQHO0qsl/nIuplfEpW2plh84X
aVE1EqepB1JDkBswBuggamxWpR/hwfZQeKBDasn3Q0lnRXPFpyGIBqzeM5D10mVM
SSLnM95xAA6HBXirYSR8EYDp24Z23ZzQdWNl8kZnWOAzyk1yu0VqivTnnBwuyaMA
7P6Rg3fs8PvwJMDkfbZPqzi0DqD7KBme7F5VVWPmAIlAHvLwORu65lNVde+A2Y2+
sgLIG2tOSe8BxpckimUwufWhre85eMUOk0cfXfMT4AvT6HrcrMQrGWV977mlxdU/
kna2K18JF7cue/Gvjl6aCfXo0vWHodFXiaGCQweHAdKGP1gunQP0fHlQUA3yvYW2
9IEIEIonY6B70yEKhYHIzn0BJRcye0/3ArRpTZk2W2EV8N2BD+H6CSevzMQoH549
+8LJR4oUJY0/D8FcGgkIepV0IWDOkGzLkWxrapNo6yGN1Blrbo34wlGkzhjIcsSh
/vWZW3C1xkb8gxunTz/31rKKDHq8y6hYpYHgQAgYMmjm8DTHgwFFMQfIHJpZYOsC
mYF+FXLegWCATbngXjAKqwu76PBFYjS3RnzhwWDL3qUk23p2Dgf3kSEVHKoQYU7D
z775sjJ+f+vsjLPg86v3l56+yrK5/hVKubAgBlRoUoG+PoCQCgxCDEwfaXZ6Nnfq
8KvnbyypsRGj8Mi3vm97hFzNoYn6wllfpEsGw6UB2nMdvkgsZAxQsGVvu53UcjRM
/XR9teemvgobz7nj2DPA5NMfDNUm5sTurTsAnhU+4KwCbXipsyua1G7gYoJDtek9
kHpqCzD255oviOYwTNpNDzdq1VsBYclPWJIqPF0A0HioRg+g9cwOAOpxd5vckDfH
wMZ0i1R6bKCtBPjyoRo9gO+d2gKw/FJtYhR025W40BrbI49s0FNdbBopUSwcYbDr
BINd59N+u4eZVU7FVYfI8dFsiKrWtsE0nRLbTVKy9LglW+dG2MdlwujelbS9vbRa
k7Q9Krre6CFYLXoMqWqsWDhDJImGN5S3e3ZprWNxVfHx+oozTKfUdoMUCZRcndwQ
Oh4UR43JSIN9MftQxmxNme0F3MLDmrdr01wRXrSBShH2A3XWtbb2699SlJqeKSV5
MyUxeb2zu9qUOgs0YbamzHYL+mfxQEDwXN8xovFKRwWZb9RZ1aoP6iuvaHqmI1VC
UvLFEPvsjvrqZPWpOgu0YLSm1PYCfr6ThikqXBXWCVJhx1WE/iehvCEnmDjgQuab
BCparhioa88P+85Z9Yt1b8R43MXEp1LbC0h/ZS0NUzDxw3psqRzgtRfrL/P4bZcS
BytdG+x/pf66fvnJect+BEA//gPzNv7M6dZ5zFfSfrvHjfzbfQ11yQQRhP6LHjca
ceif85XGC5CZ3IWVkHHvhXnLW+XIJ+o+gRo487v5S71MX9vjjuB3XumYr0bobz66
Doo5OW/8ZdH9za4nkSrKgv9sW+Ga+L6b9wXnoQMzlx5Yt9o16a+9e8v1P3RAJrt4
kZluVpKWdfXClQfd1XvlQbf/iDOeHl/mrgbe87TU+VBjBtz/S9SVlYHCoeB/AZJZ
/mOJ65NWAAAAAElFTkSuQmCC

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=fig-elflayout.png
Content-Type: image/png; name=fig-elflayout.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/fig-elflayout.png
Content-Transfer-Encoding: Base64

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

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=fig-eident.png
Content-Type: image/png; name=fig-eident.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/fig-eident.png
Content-Transfer-Encoding: Base64

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
rkJggg==

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=fig-elfhdrlayout.png
Content-Type: image/png; name=fig-elfhdrlayout.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/fig-elfhdrlayout.png
Content-Transfer-Encoding: Base64

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
AAAAAElFTkSuQmCC

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=fig-filemem.png
Content-Type: image/png; name=fig-filemem.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/fig-filemem.png
Content-Transfer-Encoding: Base64

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

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=fig-phdrlayout.png
Content-Type: image/png; name=fig-phdrlayout.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/fig-phdrlayout.png
Content-Transfer-Encoding: Base64

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

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=10.png
Content-Type: image/png; name=10.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/imagelib/callouts/10.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAAAAABzHgM7AAAAg0lEQVR42iWOoRUE
IRBDI5FILBKJnBZOXgtbwrZwEolcuyWMpAUkEnsSiczNvov7L3lJQPKS4KVsElzi
A1zyeRqIU02zfd9p446LqopzouAF13WcyIwZAei6DwTL/2EdiBRYzKB/IAwZ9wNl
+NqtwNx2+bZHtmobhckhPaNkFedStTs/3aJDYssJaxEAAABIdEVYdFNvZnR3YXJl
AEAoIylJbWFnZU1hZ2ljayA1LjEuMSAwMC8wMi8wMSBROjE2IGNyaXN0eUBteXN0
aWMuZXMuZHVwb250LmNvbQ5LEbgAAAAqdEVYdFNpZ25hdHVyZQA4NmYyNGE4Y2E5
ZjI2NTZkOGMwY2FhNjY4ODQwYTBiZsOc9/IAAAAASUVORK5CYII=

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=fig-shdrlayout.png
Content-Type: image/png; name=fig-shdrlayout.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/fig-shdrlayout.png
Content-Transfer-Encoding: Base64

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

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=fig-scn.png
Content-Type: image/png; name=fig-scn.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/fig-scn.png
Content-Transfer-Encoding: Base64

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
KtXdL8PHyP8D1/eYhsNUOYsAAAAASUVORK5CYII=

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=fig-data.png
Content-Type: image/png; name=fig-data.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/fig-data.png
Content-Transfer-Encoding: Base64

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

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=fig-strtab.png
Content-Type: image/png; name=fig-strtab.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/fig-strtab.png
Content-Transfer-Encoding: Base64

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
QmCC

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=11.png
Content-Type: image/png; name=11.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/imagelib/callouts/11.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAIAAADZF8uwAAAACXBIWXMAABJ0AAAS
dAHeZh94AAAAB3RJTUUH0gURDi0nPNlqgAAAAAd0RVh0QXV0aG9yAKmuzEgAAAAM
dEVYdERlc2NyaXB0aW9uABMJISMAAAAKdEVYdENvcHlyaWdodACsD8w6AAAADnRF
WHRDcmVhdGlvbiB0aW1lADX3DwkAAAAJdEVYdFNvZnR3YXJlAF1w/zoAAAALdEVY
dERpc2NsYWltZXIAt8C0jwAAAAh0RVh0V2FybmluZwDAG+aHAAAAB3RFWHRTb3Vy
Y2UA9f+D6wAAAAh0RVh0Q29tbWVudAD2zJa/AAAABnRFWHRUaXRsZQCo7tInAAAB
AElEQVR4nHWPraqEcBDFz18MmgQ/gn2LSTYLglhFFBcfYR9ig69hEmQfQIPZbNu0
zWwUjArq3KDrlfvxizPnzJzDiAgf1nXtuk4QBE3TcIaIiGiapiRJVFXdhoZhVFVF
H0BE67rebjdd123bBsDzfBRFHMc9n89vUZZl1+v1/X4XRaHrelmWfd8DEAShbVsi
4gCkaXq/36dpAhAEgaIo29NxHPM83zNJksQYezweRVEwxizL2i4BiON4vyRJ0tHx
XHZbAeAAeJ6Hf/B9f7d2XSfL8m+F67rLsuztiKhpmsvlclaEYTgMw7ZlR4h5nuu6
fr1eoig6jmOa5mFgP5L+yRcsrJTnugWiFAAAAABJRU5ErkJggg==

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=12.png
Content-Type: image/png; name=12.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/imagelib/callouts/12.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAIAAADZF8uwAAAACXBIWXMAABJ0AAAS
dAHeZh94AAAAB3RJTUUH0gURDi4OVUahLwAAAAd0RVh0QXV0aG9yAKmuzEgAAAAM
dEVYdERlc2NyaXB0aW9uABMJISMAAAAKdEVYdENvcHlyaWdodACsD8w6AAAADnRF
WHRDcmVhdGlvbiB0aW1lADX3DwkAAAAJdEVYdFNvZnR3YXJlAF1w/zoAAAALdEVY
dERpc2NsYWltZXIAt8C0jwAAAAh0RVh0V2FybmluZwDAG+aHAAAAB3RFWHRTb3Vy
Y2UA9f+D6wAAAAh0RVh0Q29tbWVudAD2zJa/AAAABnRFWHRUaXRsZQCo7tInAAAB
AElEQVR4nIWQIavCYBiFz8YQBGFgUoYsL8kYK1Y1G7Z/oazsF6wKMywY/AErS1YR
LbaZLbMI8mWDxY9t54bd6+XecO9Tz3l5D49CEgCA8/mcZVlRFN1udzwee57XarWa
CCRJRlGEn4xGo8fj0aQgud1u2+324XBYLBbD4fB2uz2fz/l87vv+Z6mua8uyTqeT
lDIIgjiO1+u17/vX6xVAnuckIYQA4LrubrcLggBAp9M5Ho9pmgJYLpckNSllc9FM
0XV9v99rmuZ5HoDX6wVAHQwGvV7vvTeKIsdxhBBJkjQfACgkV6tVGIbT6fR+vxuG
YRgGgKqqLpdLnueqqoJkWZaz2eyXJ/BeRQAAAChJREFUgn6/XxTFtwKSUsrNZjOZ
TEzTtG07DEMhBL9Q3sb/QP23AeADawirdYhPNLoAAAAASUVORK5CYII=

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=fig-arstr.png
Content-Type: image/png; name=fig-arstr.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/fig-arstr.png
Content-Transfer-Encoding: Base64

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

------------BKzkkJDY8XbCaejJiJl5Jr
Content-Disposition: inline; filename=fig-ariter.png
Content-Type: image/png; name=fig-ariter.png
Content-Location: http://people.freebsd.org/~jkoshy/download/libelf/fig-ariter.png
Content-Transfer-Encoding: Base64

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
Rvh/FpQwbuCxj/wAAAAASUVORK5CYII=

------------BKzkkJDY8XbCaejJiJl5Jr--
